"""
üî¨ –≠–ö–°–ü–ï–†–¢–ù–ê–Ø –í–ï–†–°–ò–Ø Excel Matcher (–ò–°–ü–†–ê–í–õ–ï–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê!)
–° –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π

–ò–°–ü–†–ê–í–õ–ï–ù–û:
    ‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–ü–ï–†–¨ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú, –ù–ï –ù–ê–ö–û–ü–ò–¢–ï–õ–¨–ù–ê–Ø!
    ‚úÖ –°—É–º–º–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π = –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π
    ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç rapidfuzz.process.extractOne (–≤ 100 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ)
    ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ –¢–û–ü-5)
    ‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Excel —Å—Ç–æ–ª–±—Ü–∞–º–∏
    ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

–£–°–¢–ê–ù–û–í–ö–ê:
    pip install pandas openpyxl xlsxwriter rapidfuzz textdistance jellyfish

–ó–ê–ü–£–°–ö:
    python expert_matcher.py
"""

import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import pandas as pd
import numpy as np
from pathlib import Path
import time
from typing import Dict, List, Tuple, Callable
import re

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
try:
    from rapidfuzz import fuzz, process
    RAPIDFUZZ_AVAILABLE = True
except ImportError:
    RAPIDFUZZ_AVAILABLE = False
    print("‚ö†Ô∏è rapidfuzz –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install rapidfuzz")

try:
    import textdistance
    TEXTDISTANCE_AVAILABLE = True
except ImportError:
    TEXTDISTANCE_AVAILABLE = False
    print("‚ö†Ô∏è textdistance –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install textdistance")

try:
    import jellyfish
    JELLYFISH_AVAILABLE = True
except ImportError:
    JELLYFISH_AVAILABLE = False
    print("‚ö†Ô∏è jellyfish –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install jellyfish")


# ============================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´
# ============================================================================

class AppConstants:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –í–µ—Ä—Å–∏—è
    VERSION = "2.2.0"
    APP_TITLE = f"üî¨ Expert Excel Matcher v{VERSION}"

    # –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    COL_SOURCE1_PREFIX = "–ò—Å—Ç–æ—á–Ω–∏–∫ 1:"
    COL_SOURCE2_PREFIX = "–ò—Å—Ç–æ—á–Ω–∏–∫ 2:"
    COL_PERCENT = "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
    COL_METHOD = "–ú–µ—Ç–æ–¥"

    # –ü–æ—Ä–æ–≥–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    THRESHOLD_PERFECT = 100
    THRESHOLD_HIGH = 90
    THRESHOLD_MEDIUM = 70
    THRESHOLD_LOW = 50
    THRESHOLD_REJECT = 50  # –ù–∏–∂–µ —ç—Ç–æ–≥–æ –ø–æ—Ä–æ–≥–∞ - –æ—Ç–∫–ª–æ–Ω—è–µ–º

    # UI –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    WINDOW_MIN_WIDTH = 1000
    WINDOW_MIN_HEIGHT = 700
    WINDOW_SCALE = 0.8  # 80% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞

    # –†–∞–∑–º–µ—Ä—ã sample –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    SAMPLE_SIZE = 200


# ============================================================================
# –ö–õ–ê–°–°–´
# ============================================================================

class MatchingMethod:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""

    def __init__(self, name: str, func: Callable, library: str,
                 use_process: bool = False, scorer=None):
        self.name = name
        self.func = func
        self.library = library
        self.use_process = use_process
        self.scorer = scorer
        
    def find_best_match(self, query: str, choices: List[str],
                       choice_dict: Dict[str, str]) -> Tuple[str, float]:
        """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫"""
        if not query or not choices:
            return "", 0.0

        try:
            query_len = len(query)

            if self.use_process and RAPIDFUZZ_AVAILABLE:
                result = process.extractOne(
                    query,
                    choices,
                    scorer=self.scorer,
                    score_cutoff=50
                )
                if result:
                    match_normalized, score, _ = result
                    original_match = choice_dict.get(match_normalized, "")

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–ª–∏–Ω–µ
                    match_len = len(original_match)
                    length_ratio = min(query_len, match_len) / max(query_len, match_len) if max(query_len, match_len) > 0 else 0

                    # –®—Ç—Ä–∞—Ñ: –µ—Å–ª–∏ –¥–ª–∏–Ω—ã –æ—á–µ–Ω—å —Ä–∞–∑–Ω—ã–µ, —Å–Ω–∏–∂–∞–µ–º score
                    # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–æ–∫ (<=3 —Å–∏–º–≤–æ–ª–∞) —à—Ç—Ä–∞—Ñ —Å–∏–ª—å–Ω–µ–µ
                    if query_len <= 3 or match_len <= 3:
                        # –î–ª—è –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–æ–∫ —Ç—Ä–µ–±—É–µ–º –ø–æ—á—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª–∏–Ω
                        length_penalty = length_ratio ** 2  # –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π —à—Ç—Ä–∞—Ñ
                    else:
                        # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —à—Ç—Ä–∞—Ñ –º—è–≥—á–µ
                        length_penalty = length_ratio ** 0.5  # –ö–æ—Ä–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π

                    adjusted_score = float(score) * length_penalty

                    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —à—Ç—Ä–∞—Ñ–∞ score < 50, –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º
                    if adjusted_score < 50:
                        return "", 0.0

                    return original_match, adjusted_score
                return "", 0.0
            else:
                best_match = ""
                best_score = 0.0

                for choice in choices:
                    try:
                        score = self.func(query, choice)
                        if isinstance(score, float) and 0 <= score <= 1:
                            score = score * 100
                        score = float(score)

                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–ª–∏–Ω–µ
                        choice_len = len(choice)
                        length_ratio = min(query_len, choice_len) / max(query_len, choice_len) if max(query_len, choice_len) > 0 else 0

                        if query_len <= 3 or choice_len <= 3:
                            length_penalty = length_ratio ** 2
                        else:
                            length_penalty = length_ratio ** 0.5

                        adjusted_score = score * length_penalty

                        if adjusted_score > best_score:
                            best_score = adjusted_score
                            best_match = choice_dict.get(choice, "")

                            if best_score >= 99.9:
                                break
                    except:
                        continue

                return best_match, best_score
        except Exception as e:
            return "", 0.0


class ExpertMatcher:
    """–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self, root):
        self.root = root
        self.root.title(AppConstants.APP_TITLE)

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ç —ç–∫—Ä–∞–Ω–∞
        window_width = max(AppConstants.WINDOW_MIN_WIDTH, int(screen_width * AppConstants.WINDOW_SCALE))
        window_height = max(AppConstants.WINDOW_MIN_HEIGHT, int(screen_height * AppConstants.WINDOW_SCALE))

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2

        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        self.root.minsize(AppConstants.WINDOW_MIN_WIDTH, AppConstants.WINDOW_MIN_HEIGHT)

        self.askupo_file = None
        self.eatool_file = None
        self.results = None
        self.methods_comparison = None
        self.full_comparison_results = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤

        # –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏
        self.askupo_columns = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
        self.eatool_columns = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2
        self.selected_askupo_cols = []  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
        self.selected_eatool_cols = []  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2
        self.inherit_askupo_cols_var = tk.BooleanVar(value=True)  # –ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
        self.inherit_eatool_cols_var = tk.BooleanVar(value=True)  # –ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2
        self.multi_column_mode_var = tk.BooleanVar(value=False)    # –†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Å—Ç–æ–ª–±—Ü–∞–º
        self.selected_methods = []  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ "–í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤"

        self.methods = self.register_all_methods()

        self.create_widgets()
        
    def register_all_methods(self) -> List[MatchingMethod]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        methods = []
        
        if RAPIDFUZZ_AVAILABLE:
            methods.extend([
                MatchingMethod("ü•á RapidFuzz: WRatio (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                             fuzz.WRatio, "rapidfuzz",
                             use_process=True, scorer=fuzz.WRatio),
                MatchingMethod("ü•à RapidFuzz: Token Set",
                             fuzz.token_set_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.token_set_ratio),
                MatchingMethod("ü•â RapidFuzz: Token Sort",
                             fuzz.token_sort_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.token_sort_ratio),
                MatchingMethod("RapidFuzz: Partial Ratio",
                             fuzz.partial_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.partial_ratio),
                MatchingMethod("RapidFuzz: Ratio",
                             fuzz.ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.ratio),
                MatchingMethod("RapidFuzz: QRatio",
                             fuzz.QRatio, "rapidfuzz",
                             use_process=True, scorer=fuzz.QRatio),
                MatchingMethod("RapidFuzz: Token Ratio",
                             fuzz.token_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.token_ratio),
                MatchingMethod("RapidFuzz: Partial Token Ratio",
                             fuzz.partial_token_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.partial_token_ratio),
                MatchingMethod("RapidFuzz: Partial Token Set",
                             fuzz.partial_token_set_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.partial_token_set_ratio),
                MatchingMethod("RapidFuzz: Partial Token Sort",
                             fuzz.partial_token_sort_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.partial_token_sort_ratio)
            ])

        if TEXTDISTANCE_AVAILABLE:
            methods.extend([
                MatchingMethod("TextDistance: Jaro-Winkler",
                             textdistance.jaro_winkler, "textdistance"),
                MatchingMethod("TextDistance: Jaro",
                             textdistance.jaro, "textdistance"),
                MatchingMethod("TextDistance: Jaccard",
                             textdistance.jaccard, "textdistance"),
                MatchingMethod("TextDistance: Sorensen-Dice",
                             textdistance.sorensen_dice, "textdistance"),
                MatchingMethod("TextDistance: Cosine",
                             textdistance.cosine, "textdistance"),
            ])

        if JELLYFISH_AVAILABLE:
            methods.extend([
                MatchingMethod("Jellyfish: Jaro-Winkler",
                             jellyfish.jaro_winkler_similarity, "jellyfish"),
                MatchingMethod("Jellyfish: Jaro",
                             jellyfish.jaro_similarity, "jellyfish"),
            ])

        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–í–ü–†)
        methods.append(
            MatchingMethod("üìä Exact Match (–í–ü–†)",
                         self.exact_match_func, "builtin",
                         use_process=False, scorer=None)
        )

        return methods
    
    def exact_match_func(self, s1: str, s2: str) -> float:
        """–§—É–Ω–∫—Ü–∏—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –º–µ—Ç–æ–¥–∞ –í–ü–†

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 100.0 –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏),
        0.0 –¥–ª—è –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        """
        norm_s1 = self.normalize_string(s1)
        norm_s2 = self.normalize_string(s2)
        return 100.0 if norm_s1 == norm_s2 else 0.0

    def normalize_string(self, s: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏"""
        if not s or pd.isna(s):
            return ""
        s = str(s).lower().strip()
        s = re.sub(r'\s+', ' ', s)
        return s

    def combine_columns(self, row: pd.Series, columns: List[str]) -> str:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

        Args:
            row: —Å—Ç—Ä–æ–∫–∞ DataFrame
            columns: —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è

        Returns:
            –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: –ø—Ä–æ–±–µ–ª)
        """
        values = []
        for col in columns:
            if col in row.index:
                val = row[col]
                if not pd.isna(val) and str(val).strip():
                    values.append(str(val).strip())

        return " ".join(values) if values else ""

    # ========================================================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ v2.1)
    # ========================================================================

    def _get_column_display_name(self, columns: List[str]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤

        Args:
            columns: —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤

        Returns:
            –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "Col1" –∏–ª–∏ "Col1 + Col2"
        """
        return " + ".join(columns) if len(columns) > 1 else columns[0]

    def _get_selected_columns(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ

        Returns:
            Tuple[List[str], List[str]]: (askupo_cols, eatool_cols)
        """
        askupo_cols = self.selected_askupo_cols if self.selected_askupo_cols else []
        eatool_cols = self.selected_eatool_cols if self.selected_eatool_cols else []
        return askupo_cols, eatool_cols

    def _create_result_row_dict(self, askupo_combined: str, best_match: str,
                                best_score: float, method_name: str,
                                askupo_row: pd.Series, askupo_df: pd.DataFrame,
                                eatool_row_dict: dict, eatool_df: pd.DataFrame) -> dict:
        """–°–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—É—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞)

        Args:
            askupo_combined: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
            best_match: –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2
            best_score: –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            method_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
            askupo_row: —Å—Ç—Ä–æ–∫–∞ –∏–∑ DataFrame –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
            askupo_df: –≤–µ—Å—å DataFrame –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
            eatool_row_dict: —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2
            eatool_df: –≤–µ—Å—å DataFrame –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        askupo_cols, eatool_cols = self._get_selected_columns()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        askupo_col_name = self._get_column_display_name(askupo_cols)
        eatool_col_name = self._get_column_display_name(eatool_cols)

        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        result_row = {
            f'{AppConstants.COL_SOURCE1_PREFIX} {askupo_col_name}': askupo_combined,
            f'{AppConstants.COL_SOURCE2_PREFIX} {eatool_col_name}': best_match,
            AppConstants.COL_PERCENT: round(best_score, 1),
            AppConstants.COL_METHOD: method_name
        }

        # –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
        if self.inherit_askupo_cols_var.get():
            for col in askupo_df.columns:
                if col not in askupo_cols:
                    result_row[f"{AppConstants.COL_SOURCE1_PREFIX} {col}"] = askupo_row[col]

        # –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2
        if best_match and self.inherit_eatool_cols_var.get():
            matched_row = eatool_row_dict.get(best_match)
            if matched_row is not None:
                for col in eatool_df.columns:
                    if col not in eatool_cols:
                        result_row[f"{AppConstants.COL_SOURCE2_PREFIX} {col}"] = matched_row[col]
        elif self.inherit_eatool_cols_var.get():
            for col in eatool_df.columns:
                if col not in eatool_cols:
                    result_row[f"{AppConstants.COL_SOURCE2_PREFIX} {col}"] = ""

        return result_row

    # ========================================================================
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    # ========================================================================

    def calculate_statistics(self, results_df: pd.DataFrame) -> Dict:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!
        –¢–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ—Ç –ø–æ –ö–ê–¢–ï–ì–û–†–ò–Ø–ú, –∞ –Ω–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ!
        """
        total = len(results_df)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ù–ï –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ!)
        perfect = len(results_df[results_df['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'] == 100])
        high = len(results_df[(results_df['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'] >= 90) & (results_df['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'] < 100)])
        medium = len(results_df[(results_df['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'] >= 70) & (results_df['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'] < 90)])
        low = len(results_df[(results_df['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'] >= 50) & (results_df['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'] < 70)])
        very_low = len(results_df[(results_df['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'] > 0) & (results_df['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'] < 50)])
        none = len(results_df[results_df['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'] == 0])
        
        # –ü–†–û–í–ï–†–ö–ê: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ total
        check_sum = perfect + high + medium + low + very_low + none
        if check_sum != total:
            print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ! {check_sum} != {total}")
        
        return {
            'total': total,
            'perfect': perfect,      # 100%
            'high': high,            # 90-99%
            'medium': medium,        # 70-89%
            'low': low,              # 50-69%
            'very_low': very_low,    # 1-49%
            'none': none,            # 0%
            'check_sum': check_sum   # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        }
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        title_frame = tk.Frame(self.root, bg="#7C3AED", pady=15)
        title_frame.pack(fill=tk.X)
        
        tk.Label(
            title_frame,
            text="üî¨ Expert Excel Matcher v1.0",
            font=("Arial", 18, "bold"),
            fg="white",
            bg="#7C3AED"
        ).pack()
        
        tk.Label(
            title_frame,
            text=f"‚ö° –í 100 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ! ‚Ä¢ {len(self.methods)} –º–µ—Ç–æ–¥–æ–≤ ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            font=("Arial", 10),
            fg="white",
            bg="#7C3AED"
        ).pack()
        
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.setup_tab = tk.Frame(self.notebook)
        self.notebook.add(self.setup_tab, text="1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        self.create_setup_tab()
        
        self.comparison_tab = tk.Frame(self.notebook)
        self.notebook.add(self.comparison_tab, text="2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤")
        self.create_comparison_tab()
        
        self.results_tab = tk.Frame(self.notebook)
        self.notebook.add(self.results_tab, text="3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        self.create_results_tab()

        self.help_tab = tk.Frame(self.notebook)
        self.notebook.add(self.help_tab, text="‚ùì –°–ø—Ä–∞–≤–∫–∞")
        self.create_help_tab()

    def create_help_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        main_frame = tk.Frame(self.help_tab, padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(main_frame, text="üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º",
                font=("Arial", 14, "bold"), fg="#7C3AED").pack(pady=(0, 15))

        # –°–æ–∑–¥–∞—ë–º canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas = tk.Canvas(main_frame, bg="white")
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="white")

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        # –†–∞–∑–¥–µ–ª 1: –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª–∞–º
        section1 = tk.LabelFrame(scrollable_frame, text="üìÇ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º (Excel/CSV)",
                                font=("Arial", 11, "bold"), padx=15, pady=10, bg="white")
        section1.pack(fill=tk.X, pady=(0, 15))

        help_text_files = """
‚úÖ –û–ë–©–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
   ‚Ä¢ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤: .xlsx, .xls –∏–ª–∏ .csv (NEW –≤ v2.2!)
   ‚Ä¢ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ CSV: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (UTF-8-BOM, UTF-8, CP1251, Windows-1251, Latin1)
   ‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å CSV: –∑–∞–ø—è—Ç–∞—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)
   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: –õ–Æ–ë–û–ï (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)

‚úÖ –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–û–í (v2.2 - –≥–∏–±–∫–∏–π –≤—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤):
   ‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –õ–Æ–ë–û–ô —Å—Ç–æ–ª–±–µ—Ü(—Ü—ã) –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ 1 –∏–ª–∏ 2 —Å—Ç–æ–ª–±—Ü–∞–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
   ‚Ä¢ –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   ‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–∞—Å–ª–µ–¥—É—é—Ç –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã

üìã –ü–†–ò–ú–ï–†–´ –î–û–ü–£–°–¢–ò–ú–´–• –°–¢–†–£–ö–¢–£–†:

   –§–∞–π–ª 1 (–ê–°–ö–£–ü–û):
   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
   ‚îÇ –ù–∞–∑–≤–∞–Ω–∏–µ –ü–û                ‚îÇ –í–µ—Ä—Å–∏—è   ‚îÇ Vendor  ‚îÇ
   ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
   ‚îÇ Microsoft Office 365       ‚îÇ 2021     ‚îÇ MS      ‚îÇ
   ‚îÇ Adobe Acrobat Reader DC    ‚îÇ 22.0     ‚îÇ Adobe   ‚îÇ
   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

   –§–∞–π–ª 2 (EA Tool):
   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
   ‚îÇ Product Name               ‚îÇ Category ‚îÇ
   ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
   ‚îÇ MS Office 365              ‚îÇ Office   ‚îÇ
   ‚îÇ Acrobat Reader             ‚îÇ PDF      ‚îÇ
   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚ö†Ô∏è –í–ê–ñ–ù–û:
   ‚Ä¢ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –õ–Æ–ë–´–ï –¥–∞–Ω–Ω—ã–µ (—Ç–µ–∫—Å—Ç, —á–∏—Å–ª–∞, –¥–∞—Ç—ã)
   ‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
   ‚Ä¢ –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã
   ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –Ω–µ –≤–∞–∂–µ–Ω (–≤—Å—ë –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
   ‚Ä¢ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ 2 —Å—Ç–æ–ª–±—Ü–æ–≤ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –ü–†–û–ë–ï–õ –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä–æ–∫—É
   ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–¥–µ—Ç –ø–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–∞–∫ –µ–¥–∏–Ω–æ–º—É —Ü–µ–ª–æ–º—É
"""

        tk.Label(section1, text=help_text_files, font=("Consolas", 9),
                justify=tk.LEFT, anchor="w", bg="white").pack(fill=tk.X)

        # –†–∞–∑–¥–µ–ª 2: –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
        section2 = tk.LabelFrame(scrollable_frame, text="‚öôÔ∏è –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                                font=("Arial", 11, "bold"), padx=15, pady=10, bg="white")
        section2.pack(fill=tk.X, pady=(0, 15))

        help_text_modes = f"""
1Ô∏è‚É£ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –í–´–ë–†–ê–ù–ù–´–ï –º–µ—Ç–æ–¥—ã –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ –¥–∞–Ω–Ω—ã—Ö (~200 –∑–∞–ø–∏—Å–µ–π)
   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –º–µ—Ç–æ–¥ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
   ‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–µ—Ç –µ–≥–æ –∫–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π Excel
   ‚Ä¢ –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤: —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ Ctrl –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
   ‚Ä¢ –ï—Å–ª–∏ –º–µ—Ç–æ–¥—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –í–°–ï {len(self.methods)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
   ‚Ä¢ –í—Ä–µ–º—è: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤

2Ô∏è‚É£ –†–ï–ñ–ò–ú –°–†–ê–í–ù–ï–ù–ò–Ø (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞):
   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –í–´–ë–†–ê–ù–ù–´–ï –º–µ—Ç–æ–¥—ã –Ω–∞ –≤—ã–±–æ—Ä–∫–µ (–Ω–µ –±–æ–ª–µ–µ –ø–µ—Ä–≤—ã—Ö 200 –∑–∞–ø–∏—Å–µ–π)
   ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É
   ‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –º–µ—Ç–æ–¥ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (100% > 90-99% > —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª)
   ‚Ä¢ –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–∏–¥–µ—Ç—å –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º
   ‚Ä¢ –ï—Å–ª–∏ –º–µ—Ç–æ–¥—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –í–°–ï {len(self.methods)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
   ‚Ä¢ –í—Ä–µ–º—è: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤

3Ô∏è‚É£ –ü–û–õ–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è):
   ‚Ä¢ –í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ Excel
   ‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ö–ê–ñ–î–´–ô –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∫–æ –í–°–ï–ú –¥–∞–Ω–Ω—ã–º
   ‚Ä¢ –°–æ–∑–¥–∞—ë—Ç Excel —Ñ–∞–π–ª —Å –ª–∏—Å—Ç–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ + —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
   ‚Ä¢ –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤: —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ Ctrl –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
   ‚Ä¢ –ï—Å–ª–∏ –º–µ—Ç–æ–¥—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –í–°–ï {len(self.methods)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
   ‚Ä¢ –í—Ä–µ–º—è: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏ –æ–±—ä—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö

üí° –°–û–í–ï–¢: –í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!
"""

        tk.Label(section2, text=help_text_modes, font=("Consolas", 9),
                justify=tk.LEFT, anchor="w", bg="white").pack(fill=tk.X)

        # –†–∞–∑–¥–µ–ª 2.5: –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –º–µ—Ç–æ–¥–∞ (NEW)
        section2_5 = tk.LabelFrame(scrollable_frame, text="üßÆ –ê–ª–≥–æ—Ä–∏—Ç–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ (NEW –≤ v2.2)",
                                font=("Arial", 11, "bold"), padx=15, pady=10, bg="white")
        section2_5.pack(fill=tk.X, pady=(0, 15))

        help_text_algorithm = """
üìä –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –í–´–ë–û–†:

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –∏ —Ä–µ–∂–∏–º –°—Ä–∞–≤–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç –û–î–ò–ù–ê–ö–û–í–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è
–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ –º–µ—Ç–æ–¥–∞. –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –≤—Å–µ–≥–¥–∞
–≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –∫–∞–∫ #1 –≤ —Ä–µ–∂–∏–º–µ –°—Ä–∞–≤–Ω–µ–Ω–∏—è.

üî¢ –õ–ï–ö–°–ò–ö–û–ì–†–ê–§–ò–ß–ï–°–ö–ê–Ø –°–û–†–¢–ò–†–û–í–ö–ê (Lexicographic Sorting):

–ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç 3 –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ –¥–∞–Ω–Ω—ã—Ö:
   1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π 100% (–∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
   2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π 90-99% (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
   3. –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º

–ú–µ—Ç–æ–¥—ã —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:

   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
   ‚îÇ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ú–∞–∫—Å–∏–º—É–º –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (100%)          ‚îÇ
   ‚îÇ –ß–µ–º –±–æ–ª—å—à–µ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - —Ç–µ–º –ª—É—á—à–µ –º–µ—Ç–æ–¥             ‚îÇ
   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                            ‚Üì –µ—Å–ª–∏ —Ä–∞–≤–Ω—ã
   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
   ‚îÇ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ú–∞–∫—Å–∏–º—É–º –≤—ã—Å–æ–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (90-99%)          ‚îÇ
   ‚îÇ –ß–µ–º –±–æ–ª—å—à–µ –ø–æ—á—Ç–∏ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - —Ç–µ–º –ª—É—á—à–µ –º–µ—Ç–æ–¥       ‚îÇ
   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                            ‚Üì –µ—Å–ª–∏ —Ä–∞–≤–Ω—ã
   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
   ‚îÇ –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è       ‚îÇ
   ‚îÇ –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π                  ‚îÇ
   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üìà –ü–†–ò–ú–ï–† –°–†–ê–í–ù–ï–ù–ò–Ø:

   –ú–µ—Ç–æ–¥ A: (50 √ó 100%, 30 √ó 90-99%, avg=85%)
   –ú–µ—Ç–æ–¥ B: (48 √ó 100%, 40 √ó 90-99%, avg=90%)

   –ü–û–ë–ï–î–ò–¢–ï–õ–¨: –ú–µ—Ç–æ–¥ A
   –ü–†–ò–ß–ò–ù–ê: 50 > 48 –≤ –ø–µ—Ä–≤–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ (100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)

   –ú–µ—Ç–æ–¥ C: (50 √ó 100%, 35 √ó 90-99%, avg=82%)
   –ú–µ—Ç–æ–¥ D: (50 √ó 100%, 35 √ó 90-99%, avg=87%)

   –ü–û–ë–ï–î–ò–¢–ï–õ–¨: –ú–µ—Ç–æ–¥ D
   –ü–†–ò–ß–ò–ù–ê: –†–∞–≤–Ω—ã –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö 1 –∏ 2, –Ω–æ 87% > 82% –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ 3

‚úÖ –ü–û–ß–ï–ú–£ –¢–ê–ö–û–ô –ê–õ–ì–û–†–ò–¢–ú:

   ‚Ä¢ –ò–¥–µ–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ - –∏—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É
   ‚Ä¢ –í—ã—Å–æ–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (90-99%) —Ç—Ä–µ–±—É—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ –º–µ–Ω–µ–µ –≤–∞–∂–µ–Ω
   ‚Ä¢ –õ–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
"""

        tk.Label(section2_5, text=help_text_algorithm, font=("Consolas", 8),
                justify=tk.LEFT, anchor="w", bg="white").pack(fill=tk.X)

        # –†–∞–∑–¥–µ–ª 3: –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ (NEW –≤ v2.2)
        section3 = tk.LabelFrame(scrollable_frame, text="üéØ –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (NEW –≤ v2.2)",
                                font=("Arial", 11, "bold"), padx=15, pady=10, bg="white")
        section3.pack(fill=tk.X, pady=(0, 15))

        help_text_columns = """
üîπ –í–´–ë–û–† –°–¢–û–õ–ë–¶–û–í:
   ‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –µ–≥–æ —Å—Ç–æ–ª–±—Ü–æ–≤
   ‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å 1 –∏–ª–∏ 2 —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
   ‚Ä¢ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ 2 —Å—Ç–æ–ª–±—Ü–æ–≤ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –ü–†–û–ë–ï–õ –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä–æ–∫—É
   ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–∞–∫ –µ–¥–∏–Ω–æ–º—É —Ü–µ–ª–æ–º—É
   ‚Ä¢ –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏—á–µ–≥–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

üîπ –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–ï –°–¢–û–õ–ë–¶–û–í (—á–µ–∫–±–æ–∫—Å—ã):
   ‚Ä¢ "–ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1" - –í–ö–õ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   ‚Ä¢ "–ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2" - –í–ö–õ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   ‚Ä¢ –ù–∞—Å–ª–µ–¥—É–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ—Ñ–∏–∫—Å: "–ò—Å—Ç–æ—á–Ω–∏–∫ 1: [–∏–º—è]"
   ‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ —á–µ–∫–±–æ–∫—Å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã

üìã –ü–†–ò–ú–ï–†:
   –ò—Å—Ç–æ—á–Ω–∏–∫ 1 –∏–º–µ–µ—Ç —Å—Ç–æ–ª–±—Ü—ã: [–ù–∞–∑–≤–∞–Ω–∏–µ –ü–û, –í–µ—Ä—Å–∏—è, Vendor]
   –ò—Å—Ç–æ—á–Ω–∏–∫ 2 –∏–º–µ–µ—Ç —Å—Ç–æ–ª–±—Ü—ã: [Product Name, Category]

   –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:
   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ 1: "–ù–∞–∑–≤–∞–Ω–∏–µ –ü–û"
   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ 2: "Product Name"

   –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±—É–¥—É—Ç —Å—Ç–æ–ª–±—Ü—ã:
   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ 1: –ù–∞–∑–≤–∞–Ω–∏–µ –ü–û
   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ 1: –í–µ—Ä—Å–∏—è (–µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –í–ö–õ)
   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ 1: Vendor (–µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –í–ö–õ)
   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ 2: Product Name
   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ 2: Category (–µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –í–ö–õ)
   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
   ‚Ä¢ –ú–µ—Ç–æ–¥
"""

        tk.Label(section3, text=help_text_columns, font=("Consolas", 9),
                justify=tk.LEFT, anchor="w", bg="white").pack(fill=tk.X)

        # –†–∞–∑–¥–µ–ª 4: –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        section4 = tk.LabelFrame(scrollable_frame, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                                font=("Arial", 11, "bold"), padx=15, pady=10, bg="white")
        section4.pack(fill=tk.X, pady=(0, 15))

        help_text_export = """
üìä –ü–û–õ–ù–´–ô –û–¢–ß–Å–¢:
   ‚Ä¢ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   ‚Ä¢ –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
   ‚Ä¢ –¶–≤–µ—Ç–æ–≤–∞—è —Ä–∞—Å–∫—Ä–∞—Å–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è

‚úÖ –¢–û–ß–ù–´–ï –°–û–í–ü–ê–î–ï–ù–ò–Ø (100%):
   ‚Ä¢ –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
   ‚Ä¢ –ì–æ—Ç–æ–≤–æ –∫ –∏–º–ø–æ—Ä—Ç—É –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏

‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢ –ü–†–û–í–ï–†–ö–ò (<90%):
   ‚Ä¢ –ó–∞–ø–∏—Å–∏ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –Ω–∏–∂–µ 90%
   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

‚ùå –ë–ï–ó –°–û–í–ü–ê–î–ï–ù–ò–ô (0%):
   ‚Ä¢ –ó–∞–ø–∏—Å–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
"""

        tk.Label(section4, text=help_text_export, font=("Consolas", 9),
                justify=tk.LEFT, anchor="w", bg="white").pack(fill=tk.X)

        # –†–∞–∑–¥–µ–ª 5: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏
        section5 = tk.LabelFrame(scrollable_frame, text="üìö –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
                                font=("Arial", 11, "bold"), padx=15, pady=10, bg="white")
        section5.pack(fill=tk.X, pady=(0, 15))

        help_text_libs = """
üè† BUILTIN (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã):
   ‚Ä¢ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–í–ü–†) - –∞–Ω–∞–ª–æ–≥ Excel VLOOKUP
   ‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 100% –ø—Ä–∏ —Ç–æ—á–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏, 0% –ø—Ä–∏ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
   ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
   ‚Ä¢ –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –±–µ–∑ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è

üî¨ RAPIDFUZZ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
   ‚Ä¢ –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ (–≤ 100 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ –∞–Ω–∞–ª–æ–≥–æ–≤)
   ‚Ä¢ –ú–µ—Ç–æ–¥—ã: WRatio, Token Set, Token Sort, Partial Ratio –∏ –¥—Ä.
   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤

üìä TEXTDISTANCE:
   ‚Ä¢ –ù–∞—É—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
   ‚Ä¢ –ú–µ—Ç–æ–¥—ã: Jaro-Winkler, Jaro, Jaccard, Sorensen-Dice, Cosine
   ‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –∏–Ω–æ–≥–¥–∞ —Ç–æ—á–Ω–µ–µ

üîä JELLYFISH:
   ‚Ä¢ –§–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–¥–ª—è –ø–æ—Ö–æ–∂–µ –∑–≤—É—á–∞—â–∏—Ö —Å–ª–æ–≤)
   ‚Ä¢ –ú–µ—Ç–æ–¥—ã: Jaro-Winkler, Jaro
   ‚Ä¢ –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∏–º—ë–Ω –∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏
"""

        tk.Label(section5, text=help_text_libs, font=("Consolas", 9),
                justify=tk.LEFT, anchor="w", bg="white").pack(fill=tk.X)

        # –†–∞–∑–¥–µ–ª 6: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤
        section6 = tk.LabelFrame(scrollable_frame, text="üîç –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è",
                                font=("Arial", 11, "bold"), padx=15, pady=10, bg="white")
        section6.pack(fill=tk.X, pady=(0, 15))

        help_text_methods = """
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üè† –í–°–¢–†–û–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ (1 –º–µ—Ç–æ–¥) - NEW –≤ v2.2
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

0Ô∏è‚É£ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–í–ü–†) üìå
   –û–ü–ò–°–ê–ù–ò–ï: –ê–Ω–∞–ª–æ–≥ —Ñ—É–Ω–∫—Ü–∏–∏ VLOOKUP –≤ Excel - —Ç–æ—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
   –ü–†–ò–ú–ï–†:
      "Microsoft Office" vs "microsoft office" ‚Üí 100% (–∏–≥–Ω–æ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞)
      "Microsoft Office" vs "MS Office" ‚Üí 0% (–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
      "Chrome" vs "Chrome Browser" ‚Üí 0% (–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
   –û–°–û–ë–ï–ù–ù–û–°–¢–ò: –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ 100% –∏–ª–∏ 0%

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìö –ë–ò–ë–õ–ò–û–¢–ï–ö–ê RAPIDFUZZ (10 –º–µ—Ç–æ–¥–æ–≤)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1Ô∏è‚É£ WRatio (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) ü•á
   –û–ü–ò–°–ê–ù–ò–ï: –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   –ü–†–ò–ú–ï–†:
      "Microsoft Office 365" vs "MS Office 365" ‚Üí 95%
      "Adobe Reader DC" vs "Acrobat Reader" ‚Üí 85%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤

2Ô∏è‚É£ Token Set
   –û–ü–ò–°–ê–ù–ò–ï: –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø–æ—Ä—è–¥–æ–∫ –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –†–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ —Å–ª–æ–≤–∞, —É–±–∏—Ä–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—ã, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–∞
   –ü–†–ò–ú–ï–†:
      "SQL Server Management Studio" vs "Management Studio SQL Server" ‚Üí 100%
      "Microsoft SQL Server" vs "SQL Server Microsoft" ‚Üí 100%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –ö–æ–≥–¥–∞ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –Ω–µ –≤–∞–∂–µ–Ω

3Ô∏è‚É£ Token Sort
   –û–ü–ò–°–ê–ù–ò–ï: –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –†–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ —Å–ª–æ–≤–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç, –∑–∞—Ç–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç
   –ü–†–ò–ú–ï–†:
      "Visual Studio Code" vs "Code Studio Visual" ‚Üí 100%
      "Google Chrome Browser" vs "Browser Chrome Google" ‚Üí 100%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –ö–æ–≥–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–¥–Ω–∏ —Å–ª–æ–≤–∞ –≤ —Ä–∞–∑–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

4Ô∏è‚É£ Partial Ratio
   –û–ü–ò–°–ê–ù–ò–ï: –ò—â–µ—Ç –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –¥–ª–∏–Ω–Ω–æ–π
   –ü–†–ò–ú–ï–†:
      "Office" vs "Microsoft Office 365 ProPlus" ‚Üí 90%
      "Chrome" vs "Google Chrome Browser" ‚Üí 85%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –ö–æ–≥–¥–∞ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, –¥—Ä—É–≥–æ–µ –ø–æ–ª–Ω–æ–µ

5Ô∏è‚É£ Ratio
   –û–ü–ò–°–ê–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ–µ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –°—á–∏—Ç–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–∞–≤–æ–∫ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
   –ü–†–ò–ú–ï–†:
      "Firefox" vs "Firefo—Ö" (—Ä—É—Å—Å–∫–∞—è '—Ö') ‚Üí 95%
      "Chrome" vs "Chromium" ‚Üí 85%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

6Ô∏è‚É£ QRatio
   –û–ü–ò–°–ê–ù–ò–ï: –ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è Ratio —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
   –ü–†–ò–ú–ï–†: –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ Ratio, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å, –∞ –Ω–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å

7Ô∏è‚É£ Token Ratio
   –û–ü–ò–°–ê–ù–ò–ï: –ö–æ–º–±–∏–Ω–∞—Ü–∏—è Ratio –∏ Token Sort
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω—ã, –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ—Ç Ratio
   –ü–†–ò–ú–ï–†:
      "Adobe Acrobat Reader" vs "Reader Acrobat Adobe" ‚Üí 100%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –°—Ä–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –º–µ–∂–¥—É Token Sort –∏ Ratio

8Ô∏è‚É£ Partial Token Ratio
   –û–ü–ò–°–ê–ù–ò–ï: –ö–æ–º–±–∏–Ω–∞—Ü–∏—è Partial Ratio –∏ Token Ratio
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π —Ç–æ–∫–µ–Ω–æ–≤
   –ü–†–ò–ú–ï–†:
      "MS Office" vs "Microsoft Office Professional Plus 2021" ‚Üí 85%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ vs –ø–æ–ª–Ω–æ–µ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π

9Ô∏è‚É£ Partial Token Set
   –û–ü–ò–°–ê–ù–ò–ï: –ö–æ–º–±–∏–Ω–∞—Ü–∏—è Partial Ratio –∏ Token Set
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
   –ü–†–ò–ú–ï–†:
      "SQL Server" vs "Microsoft SQL Server Enterprise Edition" ‚Üí 90%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –ü–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –±–æ–ª—å—à–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏

üîü Partial Token Sort
   –û–ü–ò–°–ê–ù–ò–ï: –ö–æ–º–±–∏–Ω–∞—Ü–∏—è Partial Ratio –∏ Token Sort
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
   –ü–†–ò–ú–ï–†:
      "Chrome Browser" vs "Google Chrome Web Browser Latest" ‚Üí 85%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìä –ë–ò–ë–õ–ò–û–¢–ï–ö–ê TEXTDISTANCE (5 –º–µ—Ç–æ–¥–æ–≤)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1Ô∏è‚É£1Ô∏è‚É£ Jaro-Winkler
   –û–ü–ò–°–ê–ù–ò–ï: –§–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –ë–æ–ª—å—à–∏–π –≤–µ—Å —Å–∏–º–≤–æ–ª–∞–º –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
   –ü–†–ò–ú–ï–†:
      "Microsoft" vs "Mikrosoft" ‚Üí 95%
      "PostgreSQL" vs "Postgres" ‚Üí 90%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∂–Ω–µ–µ –∫–æ–Ω—Ü–∞

1Ô∏è‚É£2Ô∏è‚É£ Jaro
   –û–ü–ò–°–ê–ù–ò–ï: –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Jaro –±–µ–∑ –∞–∫—Ü–µ–Ω—Ç–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–µ
   –ü–†–ò–ú–ï–†:
      "Oracle" vs "Orakle" ‚Üí 92%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –î–ª—è —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞

1Ô∏è‚É£3Ô∏è‚É£ Jaccard
   –û–ü–ò–°–ê–ù–ò–ï: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤ —Å–∏–º–≤–æ–ª–æ–≤/–±–∏–≥—Ä–∞–º–º
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –°—á–∏—Ç–∞–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤
   –ü–†–ò–ú–ï–†:
      "MySQL" vs "MariaDB" ‚Üí 40% (–º–∞–ª–æ –æ–±—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)
      "Python" vs "Pythan" ‚Üí 85%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –î–ª—è –æ—Ü–µ–Ω–∫–∏ –æ–±—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

1Ô∏è‚É£4Ô∏è‚É£ Sorensen-Dice
   –û–ü–ò–°–ê–ù–ò–ï: –ü–æ—Ö–æ–∂ –Ω–∞ Jaccard, –Ω–æ —Å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º—É–ª–æ–π
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –£–¥–≤–æ–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ / —Å—É–º–º–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
   –ü–†–ò–ú–ï–†:
      "Redis" vs "Reddis" ‚Üí 80%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Jaccard, —á—É—Ç—å –º—è–≥—á–µ

1Ô∏è‚É£5Ô∏è‚É£ Cosine
   –û–ü–ò–°–ê–ù–ò–ï: –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –≤–µ–∫—Ç–æ—Ä—ã, —Å—á–∏—Ç–∞–µ—Ç —É–≥–æ–ª
   –ü–†–ò–ú–ï–†:
      "MongoDB" vs "Mongo DB" ‚Üí 95%
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –î–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üîä –ë–ò–ë–õ–ò–û–¢–ï–ö–ê JELLYFISH (2 –º–µ—Ç–æ–¥–∞)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1Ô∏è‚É£6Ô∏è‚É£ Jaro-Winkler (Jellyfish)
   –û–ü–ò–°–ê–ù–ò–ï: –ê–Ω–∞–ª–æ–≥ TextDistance Jaro-Winkler
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –¢–∞ –∂–µ –ª–æ–≥–∏–∫–∞, –¥—Ä—É–≥–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
   –ü–†–ò–ú–ï–†: –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã TextDistance –≤–µ—Ä—Å–∏–∏
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è

1Ô∏è‚É£7Ô∏è‚É£ Jaro (Jellyfish)
   –û–ü–ò–°–ê–ù–ò–ï: –ê–Ω–∞–ª–æ–≥ TextDistance Jaro
   –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –¢–∞ –∂–µ –ª–æ–≥–∏–∫–∞, –¥—Ä—É–≥–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
   –ü–†–ò–ú–ï–†: –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã TextDistance –≤–µ—Ä—Å–∏–∏
   –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üí° –°–û–í–ï–¢–´ –ü–û –í–´–ë–û–†–£ –ú–ï–¢–û–î–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìå –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚Üí –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–í–ü–†)
üéØ –û–±—â–∏–π —Å–ª—É—á–∞–π ‚Üí WRatio (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
üìù –†–∞–∑–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ ‚Üí Token Set / Token Sort
‚úÇÔ∏è –ö–æ—Ä–æ—Ç–∫–æ–µ vs –ø–æ–ª–Ω–æ–µ ‚Üí Partial Ratio / Partial Token Set
üî§ –û–ø–µ—á–∞—Ç–∫–∏ ‚Üí Jaro-Winkler / Ratio
‚ö° –ù—É–∂–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å ‚Üí QRatio
üé≤ –ù–µ —É–≤–µ—Ä–µ–Ω—ã ‚Üí –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–µ–∂–∏–º "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤"!
"""

        tk.Label(section6, text=help_text_methods, font=("Consolas", 8),
                justify=tk.LEFT, anchor="w", bg="white").pack(fill=tk.X)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    def create_setup_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
        # –°–æ–∑–¥–∞–µ–º Canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas = tk.Canvas(self.setup_tab)
        scrollbar = tk.Scrollbar(self.setup_tab, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, padx=20, pady=20)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # Bind mousewheel –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)

        main_frame = scrollable_frame
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        info_frame = tk.LabelFrame(main_frame, text="üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                                   font=("Arial", 11, "bold"), padx=15, pady=15, bg="#F0F9FF")
        info_frame.pack(fill=tk.X, pady=(0, 20))

        description_text = """
üîç –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

‚ú® –û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:

  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Excel (.xlsx, .xls) –∏ CSV —Ñ–∞–π–ª–æ–≤
  ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ 1 –∏–ª–∏ —Å—Ä–∞–∑—É 2 —Å—Ç–æ–ª–±—Ü–∞–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  ‚Ä¢ 18 –º–µ—Ç–æ–¥–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –í–ü–† –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
  ‚Ä¢ –ì–∏–±–∫–∏–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤: —Ä–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ —Å–æ –≤—Å–µ–º–∏ —Å—Ä–∞–∑—É
  ‚Ä¢ –í—ã–±–æ—Ä –ª—é–±—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

üéØ –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´:

  1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π - –Ω–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π –º–µ—Ç–æ–¥ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
  2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–∞–º
  3. –ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º

  üìö –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤ ‚Äî –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–ø—Ä–∞–≤–∫–∞"

‚ö° –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–æ—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞–∂–µ –ø—Ä–∏ –Ω–µ–ø–æ–ª–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π!
"""

        tk.Label(info_frame, text=description_text,
                font=("Consolas", 9), justify=tk.LEFT, anchor="w",
                bg="#F0F9FF", fg="#1E40AF").pack(fill=tk.X)
        
        files_frame = tk.LabelFrame(main_frame, text="üìÅ –í—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã (Excel / CSV)",
                                    font=("Arial", 11, "bold"), padx=10, pady=10)
        files_frame.pack(fill=tk.X, pady=(0, 20))
        
        askupo_frame = tk.Frame(files_frame)
        askupo_frame.pack(fill=tk.X, pady=5)
        tk.Label(askupo_frame, text="1Ô∏è‚É£ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö 1 (—Ü–µ–ª–µ–≤–æ–π):",
                font=("Arial", 10, "bold")).pack(anchor=tk.W)
        self.askupo_label = tk.Label(askupo_frame, text="üìÇ –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", fg="gray", font=("Arial", 9))
        self.askupo_label.pack(anchor=tk.W, padx=20)
        tk.Button(askupo_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö 1 (—Ü–µ–ª–µ–≤–æ–π)", command=self.select_askupo,
                 bg="#10B981", fg="white", font=("Arial", 9, "bold"),
                 padx=15, pady=5).pack(anchor=tk.W, padx=20, pady=3)

        eatool_frame = tk.Frame(files_frame)
        eatool_frame.pack(fill=tk.X, pady=5)
        tk.Label(eatool_frame, text="2Ô∏è‚É£ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö 2:",
                font=("Arial", 10, "bold")).pack(anchor=tk.W)
        self.eatool_label = tk.Label(eatool_frame, text="üìÇ –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", fg="gray", font=("Arial", 9))
        self.eatool_label.pack(anchor=tk.W, padx=20)
        tk.Button(eatool_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö 2", command=self.select_eatool,
                 bg="#10B981", fg="white", font=("Arial", 9, "bold"),
                 padx=15, pady=5).pack(anchor=tk.W, padx=20, pady=3)
        
        settings_frame = tk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏", 
                                       font=("Arial", 11, "bold"), padx=10, pady=10)
        settings_frame.pack(fill=tk.X, pady=(0, 20))
        
        mode_frame = tk.Frame(settings_frame)
        mode_frame.pack(fill=tk.X, pady=5)
        
        tk.Label(mode_frame, text="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        
        self.mode_var = tk.StringVar(value="auto")
        
        tk.Radiobutton(mode_frame,
                      text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π - —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –í–´–ë–†–ê–ù–ù–´–ï –º–µ—Ç–æ–¥—ã –∏ –≤—ã–±—Ä–∞–≤ –ª—É—á—à–∏–π —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —ç–∫—Å–µ–ª—å",
                      variable=self.mode_var, value="auto",
                      font=("Arial", 9)).pack(anchor=tk.W, padx=20)
        tk.Radiobutton(mode_frame,
                      text="üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ - —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä–∫–µ (–Ω–µ –±–æ–ª–µ–µ –ø–µ—Ä–≤—ã—Ö 200 –∑–∞–ø–∏—Å–µ–π) –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π",
                      variable=self.mode_var, value="compare",
                      font=("Arial", 9)).pack(anchor=tk.W, padx=20)
        tk.Radiobutton(mode_frame,
                      text="üî¨ –ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —ç–∫—Å–µ–ª—å",
                      variable=self.mode_var, value="full_compare",
                      font=("Arial", 9)).pack(anchor=tk.W, padx=20)

        # –§—Ä–µ–π–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–æ–≤
        self.method_selector_frame = tk.Frame(settings_frame)
        self.method_selector_frame.pack(fill=tk.X, pady=5)

        tk.Label(self.method_selector_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥—ã (–¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤):",
                font=("Arial", 9, "bold")).pack(anchor=tk.W, padx=20)

        tk.Label(self.method_selector_frame,
                text="üí° –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ Ctrl –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤",
                font=("Arial", 8), fg="gray").pack(anchor=tk.W, padx=20)

        # Listbox —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–æ–≤
        listbox_frame = tk.Frame(self.method_selector_frame)
        listbox_frame.pack(anchor=tk.W, padx=20, pady=5)

        methods_scrollbar = tk.Scrollbar(listbox_frame)
        methods_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.methods_listbox = tk.Listbox(listbox_frame,
                                          selectmode=tk.MULTIPLE,
                                          height=8,
                                          width=80,
                                          yscrollcommand=methods_scrollbar.set,
                                          exportselection=False)
        self.methods_listbox.pack(side=tk.LEFT, fill=tk.BOTH)
        methods_scrollbar.config(command=self.methods_listbox.yview)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–∞–º–∏
        for method in self.methods:
            self.methods_listbox.insert(tk.END, method.name)

        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if self.methods:
            self.methods_listbox.selection_set(0)

        # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –º–µ—Ç–æ–¥—ã"
        button_frame = tk.Frame(self.method_selector_frame)
        button_frame.pack(anchor=tk.W, padx=20, pady=5)

        tk.Button(button_frame, text="‚úì –í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
                 command=self.select_all_methods,
                 font=("Arial", 8), padx=10, pady=3).pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="‚úó –°–Ω—è—Ç—å –≤—ã–±–æ—Ä",
                 command=self.deselect_all_methods,
                 font=("Arial", 8), padx=10, pady=3).pack(side=tk.LEFT, padx=5)

        # ==== –ù–û–í–ê–Ø –°–ï–ö–¶–ò–Ø: –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ====
        columns_frame = tk.LabelFrame(main_frame, text="–í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
                                      font=("Arial", 11, "bold"), padx=10, pady=10)
        columns_frame.pack(fill=tk.X, pady=(0, 10))

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        columns_container = tk.Frame(columns_frame)
        columns_container.pack(fill=tk.X)

        # –ò—Å—Ç–æ—á–Ω–∏–∫ 1 (–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
        source1_frame = tk.Frame(columns_container)
        source1_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)

        tk.Label(source1_frame, text="üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö 1 (—Ü–µ–ª–µ–≤–æ–π):",
                font=("Arial", 10, "bold")).pack(anchor=tk.W, pady=(0, 5))

        tk.Label(source1_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (1-2 —Å—Ç–æ–ª–±—Ü–∞):",
                font=("Arial", 9)).pack(anchor=tk.W)

        listbox_frame1 = tk.Frame(source1_frame)
        listbox_frame1.pack(fill=tk.BOTH, expand=True)

        scrollbar1 = tk.Scrollbar(listbox_frame1)
        scrollbar1.pack(side=tk.RIGHT, fill=tk.Y)

        self.askupo_col_listbox = tk.Listbox(listbox_frame1, selectmode=tk.MULTIPLE,
                                             height=5, yscrollcommand=scrollbar1.set,
                                             exportselection=False)
        self.askupo_col_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar1.config(command=self.askupo_col_listbox.yview)
        self.askupo_col_listbox.bind('<<ListboxSelect>>', self.on_askupo_column_select)

        tk.Checkbutton(source1_frame, text="–ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1",
                      variable=self.inherit_askupo_cols_var,
                      font=("Arial", 9)).pack(anchor=tk.W, pady=(5, 0))

        # –ò—Å—Ç–æ—á–Ω–∏–∫ 2 (–ø—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
        source2_frame = tk.Frame(columns_container)
        source2_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)

        tk.Label(source2_frame, text="üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö 2:",
                font=("Arial", 10, "bold")).pack(anchor=tk.W, pady=(0, 5))

        tk.Label(source2_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (1-2 —Å—Ç–æ–ª–±—Ü–∞):",
                font=("Arial", 9)).pack(anchor=tk.W)

        listbox_frame2 = tk.Frame(source2_frame)
        listbox_frame2.pack(fill=tk.BOTH, expand=True)

        scrollbar2 = tk.Scrollbar(listbox_frame2)
        scrollbar2.pack(side=tk.RIGHT, fill=tk.Y)

        self.eatool_col_listbox = tk.Listbox(listbox_frame2, selectmode=tk.MULTIPLE,
                                             height=5, yscrollcommand=scrollbar2.set,
                                             exportselection=False)
        self.eatool_col_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar2.config(command=self.eatool_col_listbox.yview)
        self.eatool_col_listbox.bind('<<ListboxSelect>>', self.on_eatool_column_select)

        tk.Checkbutton(source2_frame, text="–ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2",
                      variable=self.inherit_eatool_cols_var,
                      font=("Arial", 9)).pack(anchor=tk.W, pady=(5, 0))

        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è —Ä–µ–∂–∏–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        tk.Checkbutton(columns_frame,
                      text="üîó –†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ 2 —Å—Ç–æ–ª–±—Ü–∞–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (—Ç—Ä–µ–±—É–µ—Ç –≤—ã–±–æ—Ä–∞ 2 —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∫–∞–∂–¥–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ)",
                      variable=self.multi_column_mode_var,
                      font=("Arial", 9, "bold"), fg="#7C3AED").pack(anchor=tk.W, pady=(10, 0))

        tk.Label(columns_frame,
                text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤, —Å—Ç–æ–ª–±—Ü—ã –ø–æ—è–≤—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ 1-2 —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.",
                font=("Arial", 8), fg="gray", wraplength=700, justify=tk.LEFT).pack(anchor=tk.W, pady=(5, 0))

        self.process_btn = tk.Button(main_frame, text="üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É",
                 command=self.start_processing, bg="#7C3AED", fg="white",
                 font=("Arial", 13, "bold"), padx=50, pady=12,
                 state=tk.DISABLED)
        self.process_btn.pack(pady=20)
        
    def create_comparison_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤"""
        frame = tk.Frame(self.comparison_tab, padx=20, pady=20)
        frame.pack(fill=tk.BOTH, expand=True)
        
        tk.Label(frame, text="üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤",
                font=("Arial", 13, "bold")).pack(pady=10)
        
        tree_frame = tk.Frame(frame)
        tree_frame.pack(fill=tk.BOTH, expand=True)
        
        scroll_y = ttk.Scrollbar(tree_frame)
        scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
        
        scroll_x = ttk.Scrollbar(tree_frame, orient=tk.HORIZONTAL)
        scroll_x.pack(side=tk.BOTTOM, fill=tk.X)
        
        self.comparison_tree = ttk.Treeview(
            tree_frame,
            columns=("rank", "method", "library", "perfect", "high", "avg_score", "time"),
            show="headings",
            yscrollcommand=scroll_y.set,
            xscrollcommand=scroll_x.set,
            height=15
        )
        
        scroll_y.config(command=self.comparison_tree.yview)
        scroll_x.config(command=self.comparison_tree.xview)
        
        headers = [
            ("rank", "üèÜ", 50),
            ("method", "–ú–µ—Ç–æ–¥", 300),
            ("library", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", 120),
            ("perfect", "100%", 80),
            ("high", "90-99%", 80),
            ("avg_score", "–°—Ä–µ–¥–Ω–∏–π %", 100),
            ("time", "–í—Ä–µ–º—è", 90),
        ]
        
        for col, text, width in headers:
            self.comparison_tree.heading(col, text=text)
            self.comparison_tree.column(col, width=width, 
                                       anchor=tk.CENTER if col != "method" else tk.W)
        
        self.comparison_tree.pack(fill=tk.BOTH, expand=True)
        
        btn_frame = tk.Frame(frame)
        btn_frame.pack(fill=tk.X, pady=10)
        
        tk.Button(btn_frame, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ Excel",
                 command=self.export_comparison, bg="#3B82F6", fg="white",
                 font=("Arial", 10, "bold"), padx=20, pady=5).pack(side=tk.LEFT, padx=5)
        
    def create_results_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        frame = tk.Frame(self.results_tab, padx=20, pady=20)
        frame.pack(fill=tk.BOTH, expand=True)
        
        self.result_info_frame = tk.Frame(frame)
        self.result_info_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.result_stats_frame = tk.Frame(frame)
        self.result_stats_frame.pack(fill=tk.X, pady=(0, 10))
        
        export_frame = tk.Frame(frame)
        export_frame.pack(fill=tk.X, pady=(0, 10))
        
        tk.Label(export_frame, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel:", 
                font=("Arial", 11, "bold")).pack(anchor=tk.W)
        
        btn_container = tk.Frame(export_frame)
        btn_container.pack(fill=tk.X, pady=5)
        
        export_buttons = [
            ("üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", self.export_full, "#4F46E5"),
            ("‚úÖ –¢–æ—á–Ω—ã–µ (100%)", self.export_perfect, "#10B981"),
            ("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ (<90%)", self.export_problems, "#F59E0B"),
            ("‚ùå –ë–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (0%)", self.export_no_match, "#EF4444"),
        ]
        
        for text, command, color in export_buttons:
            tk.Button(btn_container, text=text, command=command, bg=color, fg="white",
                     font=("Arial", 10, "bold"), padx=18, pady=6).pack(side=tk.LEFT, padx=3)
        
        tk.Label(frame, text="üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 50 –∑–∞–ø–∏—Å–µ–π):",
                font=("Arial", 11, "bold")).pack(anchor=tk.W, pady=(10, 5))
        
        tree_frame = tk.Frame(frame)
        tree_frame.pack(fill=tk.BOTH, expand=True)
        
        scroll_y = ttk.Scrollbar(tree_frame)
        scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.results_tree = ttk.Treeview(
            tree_frame,
            columns=("num", "askupo", "eatool", "percent"),
            show="headings",
            yscrollcommand=scroll_y.set,
            height=15
        )
        scroll_y.config(command=self.results_tree.yview)
        
        headers = [
            ("num", "‚Ññ", 50),
            ("askupo", "–ò—Å—Ç–æ—á–Ω–∏–∫ 1 (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã–π —Å—Ç–æ–ª–±–µ—Ü)", 350),
            ("eatool", "–ò—Å—Ç–æ—á–Ω–∏–∫ 2 (—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü)", 350),
            ("percent", "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", 120),
        ]
        
        for col, text, width in headers:
            self.results_tree.heading(col, text=text)
            self.results_tree.column(col, width=width, 
                                    anchor=tk.CENTER if col in ["num", "percent"] else tk.W)
        
        self.results_tree.pack(fill=tk.BOTH, expand=True)
        
    def read_data_file(self, filename: str, nrows=None) -> pd.DataFrame:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ Excel –∏–ª–∏ CSV —Ñ–∞–π–ª–∞

        Args:
            filename: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            nrows: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è (None = –≤—Å–µ)

        Returns:
            DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        file_ext = Path(filename).suffix.lower()

        if file_ext == '.csv':
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è CSV
            encodings = ['utf-8-sig', 'utf-8', 'cp1251', 'windows-1251', 'latin1']
            for encoding in encodings:
                try:
                    df = pd.read_csv(filename, encoding=encoding, nrows=nrows)
                    return df
                except (UnicodeDecodeError, Exception):
                    continue
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            df = pd.read_csv(filename, nrows=nrows)
        else:
            # Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)
            df = pd.read_excel(filename, nrows=nrows)

        return df

    def validate_excel_file(self, filename: str) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è Excel –∏–ª–∏ CSV —Ñ–∞–π–ª–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (v2.1)"""
        try:
            df = self.read_data_file(filename)

            if df.empty:
                return False, "–§–∞–π–ª –ø—É—Å—Ç–æ–π (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)"

            if len(df.columns) == 0:
                return False, "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–æ–ª–±—Ü–æ–≤"

            if len(df) == 0:
                return False, "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏"

            # –£—Å–ø–µ—à–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            return True, f"‚úÖ –§–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π\n   –ó–∞–ø–∏—Å–µ–π: {len(df)}\n   –°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}\n   –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤: {', '.join(df.columns[:5])}{' ...' if len(df.columns) > 5 else ''}"

        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:\n{str(e)}"

    def select_askupo(self):
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö 1 (—Ü–µ–ª–µ–≤–æ–π)",
            filetypes=[("Data files", "*.xlsx *.xls *.csv"), ("Excel files", "*.xlsx *.xls"), ("CSV files", "*.csv"), ("All files", "*.*")]
        )
        if filename:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            is_valid, message = self.validate_excel_file(filename)

            if not is_valid:
                messagebox.showerror("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö 1",
                                   f"–§–∞–π–ª –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É:\n\n{message}\n\n"
                                   f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                                   f"‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–Ω–µ –ø—É—Å—Ç–æ–π)\n"
                                   f"‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∏ —Å—Ç—Ä–æ–∫–∏\n"
                                   f"‚Ä¢ –§–æ—Ä–º–∞—Ç: .xlsx, .xls –∏–ª–∏ .csv")
                return

            self.askupo_file = filename
            display_name = Path(filename).name
            if len(display_name) > 50:
                display_name = display_name[:47] + "..."
            self.askupo_label.config(text=f"‚úÖ {display_name}", fg="green", font=("Arial", 9, "bold"))

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
            self.load_askupo_columns()
            self.check_ready()
    
    def select_eatool(self):
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö 2",
            filetypes=[("Data files", "*.xlsx *.xls *.csv"), ("Excel files", "*.xlsx *.xls"), ("CSV files", "*.csv"), ("All files", "*.*")]
        )
        if filename:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            is_valid, message = self.validate_excel_file(filename)

            if not is_valid:
                messagebox.showerror("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö 2",
                                   f"–§–∞–π–ª –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É:\n\n{message}\n\n"
                                   f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                                   f"‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–Ω–µ –ø—É—Å—Ç–æ–π)\n"
                                   f"‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∏ —Å—Ç—Ä–æ–∫–∏\n"
                                   f"‚Ä¢ –§–æ—Ä–º–∞—Ç: .xlsx, .xls –∏–ª–∏ .csv")
                return

            self.eatool_file = filename
            display_name = Path(filename).name
            if len(display_name) > 50:
                display_name = display_name[:47] + "..."
            self.eatool_label.config(text=f"‚úÖ {display_name}", fg="green", font=("Arial", 9, "bold"))

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
            self.load_eatool_columns()
            self.check_ready()
    
    def check_ready(self):
        if self.askupo_file and self.eatool_file:
            self.process_btn.config(state=tk.NORMAL)

    def load_askupo_columns(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1"""
        try:
            df = self.read_data_file(self.askupo_file, nrows=0)  # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self.askupo_columns = list(df.columns)

            # –û–±–Ω–æ–≤–ª—è–µ–º GUI –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            if hasattr(self, 'askupo_col_listbox'):
                self.askupo_col_listbox.delete(0, tk.END)
                for col in self.askupo_columns:
                    self.askupo_col_listbox.insert(tk.END, col)
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                if self.askupo_columns:
                    self.askupo_col_listbox.selection_set(0)
                    self.selected_askupo_cols = [self.askupo_columns[0]]
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1:\n{str(e)}")

    def load_eatool_columns(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2"""
        try:
            df = self.read_data_file(self.eatool_file, nrows=0)  # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self.eatool_columns = list(df.columns)

            # –û–±–Ω–æ–≤–ª—è–µ–º GUI –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            if hasattr(self, 'eatool_col_listbox'):
                self.eatool_col_listbox.delete(0, tk.END)
                for col in self.eatool_columns:
                    self.eatool_col_listbox.insert(tk.END, col)
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                if self.eatool_columns:
                    self.eatool_col_listbox.selection_set(0)
                    self.selected_eatool_cols = [self.eatool_columns[0]]
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2:\n{str(e)}")

    def on_askupo_column_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1"""
        selected_indices = self.askupo_col_listbox.curselection()
        self.selected_askupo_cols = [self.askupo_columns[i] for i in selected_indices]

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º 2 —Å—Ç–æ–ª–±—Ü–∞
        if len(selected_indices) > 2:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                 "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 2 —Å—Ç–æ–ª–±—Ü–∞.\n"
                                 "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
            # –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä
            self.askupo_col_listbox.selection_clear(selected_indices[-1])
            self.selected_askupo_cols = self.selected_askupo_cols[:-1]

    def on_eatool_column_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2"""
        selected_indices = self.eatool_col_listbox.curselection()
        self.selected_eatool_cols = [self.eatool_columns[i] for i in selected_indices]

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º 2 —Å—Ç–æ–ª–±—Ü–∞
        if len(selected_indices) > 2:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                 "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 2 —Å—Ç–æ–ª–±—Ü–∞.\n"
                                 "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
            # –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä
            self.eatool_col_listbox.selection_clear(selected_indices[-1])
            self.selected_eatool_cols = self.selected_eatool_cols[:-1]

    def select_all_methods(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤ —Å–ø–∏—Å–∫–µ"""
        self.methods_listbox.selection_set(0, tk.END)

    def deselect_all_methods(self):
        """–°–Ω—è—Ç—å –≤—ã–±–æ—Ä –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤"""
        self.methods_listbox.selection_clear(0, tk.END)

    def get_selected_methods(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        selected_indices = self.methods_listbox.curselection()
        return [self.methods[i] for i in selected_indices]

    def start_processing(self):
        """–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        if not self.selected_askupo_cols:
            messagebox.showerror("–û—à–∏–±–∫–∞",
                               "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö 1!\n\n"
                               "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
            return

        if not self.selected_eatool_cols:
            messagebox.showerror("–û—à–∏–±–∫–∞",
                               "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö 2!\n\n"
                               "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        if self.multi_column_mode_var.get():
            if len(self.selected_askupo_cols) != 2:
                messagebox.showerror("–û—à–∏–±–∫–∞",
                                   "–†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ 2 —Å—Ç–æ–ª–±—Ü–∞–º —Ç—Ä–µ–±—É–µ—Ç –≤—ã–±–æ—Ä–∞ —Ä–æ–≤–Ω–æ 2 —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ 1!\n\n"
                                   f"–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–æ: {len(self.selected_askupo_cols)}")
                return
            if len(self.selected_eatool_cols) != 2:
                messagebox.showerror("–û—à–∏–±–∫–∞",
                                   "–†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ 2 —Å—Ç–æ–ª–±—Ü–∞–º —Ç—Ä–µ–±—É–µ—Ç –≤—ã–±–æ—Ä–∞ —Ä–æ–≤–Ω–æ 2 —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ 2!\n\n"
                                   f"–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–æ: {len(self.selected_eatool_cols)}")
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        if len(self.selected_askupo_cols) != len(self.selected_eatool_cols):
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                  "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å!\n\n"
                                  f"–ò—Å—Ç–æ—á–Ω–∏–∫ 1: {len(self.selected_askupo_cols)} —Å—Ç–æ–ª–±—Ü–æ–≤\n"
                                  f"–ò—Å—Ç–æ—á–Ω–∏–∫ 2: {len(self.selected_eatool_cols)} —Å—Ç–æ–ª–±—Ü–æ–≤\n\n"
                                  "–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –í–°–ï–• —Ä–µ–∂–∏–º–æ–≤
        mode = self.mode_var.get()
        selected_methods = self.get_selected_methods()

        # –ï—Å–ª–∏ –º–µ—Ç–æ–¥—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        if not selected_methods:
            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            for i in range(len(self.methods)):
                self.methods_listbox.selection_set(i)
            selected_methods = self.methods
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                               f"–ú–µ—Ç–æ–¥—ã –Ω–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã.\n\n"
                               f"–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –í–°–ï {len(self.methods)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤.")

        if mode == "auto":
            self.run_auto_mode(selected_methods)
        elif mode == "compare":
            self.run_compare_mode(selected_methods)
        elif mode == "full_compare":
            self.run_full_comparison_mode(selected_methods)
    
    def run_auto_mode(self, selected_methods):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –º–µ—Ç–æ–¥–∞ –∏–∑ –í–´–ë–†–ê–ù–ù–´–•

        –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ò–î–ï–ù–¢–ò–ß–ù–ê —Ä–µ–∂–∏–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ú–∞–∫—Å–∏–º—É–º 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ú–∞–∫—Å–∏–º—É–º 90-99% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
        """
        try:
            askupo_df = self.read_data_file(self.askupo_file)
            eatool_df = self.read_data_file(self.eatool_file)

            askupo_col = askupo_df.columns[0]
            eatool_col = eatool_df.columns[0]

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            sample_size = min(200, len(askupo_df))
            # RapidFuzz –±—ã—Å—Ç—Ä—ã–µ (~2 —Å–µ–∫ –Ω–∞ –º–µ—Ç–æ–¥), –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ–¥–ª–µ–Ω–Ω–µ–µ (~15-20 —Å–µ–∫ –Ω–∞ –º–µ—Ç–æ–¥)
            rapidfuzz_count = sum(1 for m in selected_methods if m.use_process)
            other_count = len(selected_methods) - rapidfuzz_count
            estimated_time = (rapidfuzz_count * 2 + other_count * 20) / 60

            info_msg = (f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ:\n"
                       f"   –ê–°–ö–£–ü–û: {len(askupo_df)} –∑–∞–ø–∏—Å–µ–π\n"
                       f"   EA Tool: {len(eatool_df)} –∑–∞–ø–∏—Å–µ–π\n\n"
                       f"üîç –ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(selected_methods)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤\n"
                       f"   ‚Ä¢ RapidFuzz –º–µ—Ç–æ–¥–æ–≤: {rapidfuzz_count} (–±—ã—Å—Ç—Ä—ã–µ)\n"
                       f"   ‚Ä¢ –î—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤: {other_count} (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)\n"
                       f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time:.0f}-{estimated_time*1.5:.0f} –º–∏–Ω—É—Ç")

            if not messagebox.askokcancel("–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É?", info_msg):
                return

            sample_askupo = askupo_df.head(sample_size)

            best_method = None
            best_score = (-1, -1, -1)  # –ö–æ—Ä—Ç–µ–∂ –¥–ª—è –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

            progress_win = tk.Toplevel(self.root)
            progress_win.title("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
            progress_win.geometry("500x200")
            progress_win.transient(self.root)
            progress_win.grab_set()

            tk.Label(progress_win, text="üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ sample –¥–∞–Ω–Ω—ã—Ö",
                    font=("Arial", 12, "bold")).pack(pady=10)

            progress_label = tk.Label(progress_win, text="", font=("Arial", 10))
            progress_label.pack(pady=5)

            progress_bar = ttk.Progressbar(progress_win, length=400, mode='determinate')
            progress_bar.pack(pady=10)
            progress_bar['maximum'] = len(selected_methods)

            time_label = tk.Label(progress_win, text="", font=("Arial", 9), fg="gray")
            time_label.pack(pady=5)

            start_time = time.time()

            for i, method in enumerate(selected_methods):
                elapsed = time.time() - start_time
                progress_label.config(text=f"–ú–µ—Ç–æ–¥ {i+1}/{len(selected_methods)}: {method.name}")
                time_label.config(text=f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {int(elapsed)}—Å")
                progress_bar['value'] = i
                self.root.update()

                score = self.evaluate_method_fast(method, sample_askupo, eatool_df,
                                                  askupo_col, eatool_col)

                if score > best_score:
                    best_score = score
                    best_method = method

            progress_win.destroy()

            messagebox.showinfo("‚úÖ –õ—É—á—à–∏–π –º–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω!",
                              f"üèÜ –í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥: {best_method.name}\n\n"
                              f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ sample –¥–∞–Ω–Ω—ã—Ö:\n"
                              f"   ‚Ä¢ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {best_score[0]}\n"
                              f"   ‚Ä¢ 90-99% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {best_score[1]}\n"
                              f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {best_score[2]:.1f}%\n\n"
                              f"‚è±Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º –∑–∞–π–º–µ—Ç ~2-3 –º–∏–Ω—É—Ç—ã")

            self.apply_method_optimized(best_method, askupo_df, eatool_df,
                                       askupo_col, eatool_col)

        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{str(e)}\n\n"
                               f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                               f"‚Ä¢ –§–∞–π–ª—ã Excel –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n"
                               f"‚Ä¢ –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ü–û\n"
                               f"‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
    
    def run_compare_mode(self, selected_methods):
        """–†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –í–´–ë–†–ê–ù–ù–´–• –º–µ—Ç–æ–¥–æ–≤

        –õ–æ–≥–∏–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ò–î–ï–ù–¢–ò–ß–ù–ê –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Ä–µ–∂–∏–º—É:
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ú–∞–∫—Å–∏–º—É–º 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ú–∞–∫—Å–∏–º—É–º 90-99% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
        """
        try:
            askupo_df = self.read_data_file(self.askupo_file)
            eatool_df = self.read_data_file(self.eatool_file)

            askupo_col = askupo_df.columns[0]
            eatool_col = eatool_df.columns[0]

            sample_size = min(200, len(askupo_df))
            sample_askupo = askupo_df.head(sample_size)

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            rapidfuzz_count = sum(1 for m in selected_methods if m.use_process)
            other_count = len(selected_methods) - rapidfuzz_count
            estimated_time = (rapidfuzz_count * 3 + other_count * 30) / 60

            info_msg = (f"üìä –ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(selected_methods)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤\n"
                       f"   ‚Ä¢ RapidFuzz –º–µ—Ç–æ–¥–æ–≤: {rapidfuzz_count} (–±—ã—Å—Ç—Ä—ã–µ)\n"
                       f"   ‚Ä¢ –î—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤: {other_count} (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)\n"
                       f"üì¶ Sample: {sample_size} –∑–∞–ø–∏—Å–µ–π\n"
                       f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time:.0f}-{estimated_time*1.5:.0f} –º–∏–Ω—É—Ç")

            if not messagebox.askokcancel("–ù–∞—á–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ?", info_msg):
                return

            progress_win = tk.Toplevel(self.root)
            progress_win.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
            progress_win.geometry("500x200")
            progress_win.transient(self.root)
            progress_win.grab_set()

            tk.Label(progress_win, text="üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤",
                    font=("Arial", 12, "bold")).pack(pady=10)

            progress_label = tk.Label(progress_win, text="", font=("Arial", 10))
            progress_label.pack(pady=5)

            progress_bar = ttk.Progressbar(progress_win, length=400, mode='determinate')
            progress_bar.pack(pady=10)
            progress_bar['maximum'] = len(selected_methods)

            comparison_results = []

            for i, method in enumerate(selected_methods):
                progress_label.config(text=f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {i+1}/{len(selected_methods)}: {method.name}")
                progress_bar['value'] = i
                self.root.update()

                start_time = time.time()
                results = self.test_method_optimized(method, sample_askupo, eatool_df,
                                                     askupo_col, eatool_col)
                elapsed = time.time() - start_time

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats_dict = self.calculate_statistics(results)

                stats = {
                    'method': method.name,
                    'library': method.library,
                    'avg_score': results['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'].mean(),
                    'perfect': stats_dict['perfect'],      # –¢–æ–ª—å–∫–æ 100%
                    'high': stats_dict['high'],            # –¢–æ–ª—å–∫–æ 90-99%
                    'medium': stats_dict['medium'],        # –¢–æ–ª—å–∫–æ 70-89%
                    'time': elapsed
                }

                comparison_results.append(stats)

            progress_win.destroy()

            # –õ–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–∏–¥–µ–Ω—Ç–∏—á–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Ä–µ–∂–∏–º—É)
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π > 90-99% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π > —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
            comparison_results.sort(key=lambda x: (x['perfect'], x['high'], x['avg_score']),
                                   reverse=True)

            self.display_comparison(comparison_results)
            self.notebook.select(1)

            messagebox.showinfo("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                              f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(selected_methods)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤\n\n"
                              f"üèÜ –õ—É—á—à–∏–π: {comparison_results[0]['method']}\n"
                              f"üìä 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {comparison_results[0]['perfect']}")

        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{str(e)}")

    def _run_comparison_on_full_data(self, methods: List, window_title: str,
                                     header_text: str, export_filename: str) -> None:
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö

        Args:
            methods: –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            window_title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            header_text: –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –æ–∫–Ω–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            export_filename: –ò–º—è —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        askupo_df = self.read_data_file(self.askupo_file)
        eatool_df = self.read_data_file(self.eatool_file)

        askupo_col = askupo_df.columns[0]
        eatool_col = eatool_df.columns[0]

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_win = tk.Toplevel(self.root)
        progress_win.title(window_title)
        progress_win.geometry("600x250")
        progress_win.transient(self.root)
        progress_win.grab_set()

        tk.Label(progress_win, text=header_text,
                font=("Arial", 12, "bold")).pack(pady=10)

        method_label = tk.Label(progress_win, text="", font=("Arial", 10))
        method_label.pack(pady=5)

        progress_label = tk.Label(progress_win, text="", font=("Arial", 9))
        progress_label.pack(pady=5)

        progress_bar = ttk.Progressbar(progress_win, length=500, mode='determinate')
        progress_bar.pack(pady=10)
        progress_bar['maximum'] = len(methods) * len(askupo_df)

        time_label = tk.Label(progress_win, text="", font=("Arial", 9), fg="gray")
        time_label.pack(pady=5)

        start_time = time.time()
        all_methods_results = {}  # –°–ª–æ–≤–∞—Ä—å: –∏–º—è –º–µ—Ç–æ–¥–∞ -> DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        comparison_stats = []

        total_processed = 0

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
        for method_idx, method in enumerate(methods):
            method_start_time = time.time()
            method_label.config(text=f"–ú–µ—Ç–æ–¥ {method_idx+1}/{len(methods)}: {method.name}")
            self.root.update()

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –∫–æ –í–°–ï–ú –¥–∞–Ω–Ω—ã–º
            results_df = self.test_method_optimized(method, askupo_df, eatool_df,
                                                   askupo_col, eatool_col)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            all_methods_results[method.name] = results_df

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_dict = self.calculate_statistics(results_df)

            comparison_stats.append({
                'method': method.name,
                'library': method.library,
                'total': stats_dict['total'],
                'perfect': stats_dict['perfect'],
                'high': stats_dict['high'],
                'medium': stats_dict['medium'],
                'low': stats_dict['low'],
                'very_low': stats_dict['very_low'],
                'none': stats_dict['none'],
                'avg_score': results_df['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'].mean(),
                'time': time.time() - method_start_time
            })

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            total_processed += len(askupo_df)
            progress_bar['value'] = total_processed
            elapsed = time.time() - start_time
            remaining = (elapsed / total_processed) * (len(methods) * len(askupo_df) - total_processed)

            progress_label.config(text=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {method_idx+1}/{len(methods)}")
            time_label.config(text=f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {int(elapsed)}—Å ({elapsed/60:.1f} –º–∏–Ω) | –û—Å—Ç–∞–ª–æ—Å—å: ~{int(remaining)}—Å ({remaining/60:.1f} –º–∏–Ω)")
            self.root.update()

        progress_win.destroy()

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        comparison_stats.sort(key=lambda x: (x['perfect'], x['high'], x['avg_score']), reverse=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.full_comparison_results = {
            'methods_data': all_methods_results,
            'comparison_stats': comparison_stats
        }

        elapsed_total = time.time() - start_time

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.export_full_comparison_to_excel(default_filename=export_filename)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messagebox.showinfo("‚úÖ –ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                          f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {int(elapsed_total)}—Å ({elapsed_total/60:.1f} –º–∏–Ω)\n\n"
                          f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(methods)} –º–µ—Ç–æ–¥–æ–≤\n"
                          f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(askupo_df)} –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–º –º–µ—Ç–æ–¥–µ\n\n"
                          f"üèÜ –õ—É—á—à–∏–π –º–µ—Ç–æ–¥: {comparison_stats[0]['method']}\n"
                          f"   ‚Ä¢ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {comparison_stats[0]['perfect']}\n"
                          f"   ‚Ä¢ 90-99%: {comparison_stats[0]['high']}\n"
                          f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {comparison_stats[0]['avg_score']:.1f}%\n\n"
                          f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel")

    def run_full_comparison_mode(self, selected_methods):
        """–ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - –ø—Ä–∏–º–µ–Ω—è–µ—Ç –í–´–ë–†–ê–ù–ù–´–ï –º–µ—Ç–æ–¥—ã –∫–æ –í–°–ï–ú –¥–∞–Ω–Ω—ã–º"""
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            askupo_df = self.read_data_file(self.askupo_file)
            eatool_df = self.read_data_file(self.eatool_file)

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö
            rapidfuzz_count = sum(1 for m in selected_methods if m.use_process)
            other_count = len(selected_methods) - rapidfuzz_count
            estimated_time = (rapidfuzz_count * 3 + other_count * 4) / 60

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            info_msg = (f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!\n\n"
                       f"üìÇ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n"
                       f"   –ê–°–ö–£–ü–û: {len(askupo_df)} –∑–∞–ø–∏—Å–µ–π\n"
                       f"   EA Tool: {len(eatool_df)} –∑–∞–ø–∏—Å–µ–π\n"
                       f"   –ú–µ—Ç–æ–¥–æ–≤: {len(selected_methods)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö\n\n"
                       f"üî¨ –ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫–æ –í–°–ï–ú –∑–∞–ø–∏—Å—è–º\n"
                       f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time:.0f}-{estimated_time*1.5:.0f} –º–∏–Ω—É—Ç\n\n"
                       f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: Excel —Ñ–∞–π–ª —Å –ª–∏—Å—Ç–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ + —Å–≤–æ–¥–∫–∞")

            if not messagebox.askokcancel("‚ö†Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ?", info_msg):
                return

            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._run_comparison_on_full_data(
                methods=selected_methods,
                window_title="–ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...",
                header_text="üî¨ –ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö",
                export_filename="–ü–æ–ª–Ω–æ–µ_—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö_–º–µ—Ç–æ–¥–æ–≤.xlsx"
            )

        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{str(e)}")

    # –ú–µ—Ç–æ–¥—ã run_manual_mode –∏ run_multi_manual_mode –£–î–ê–õ–ï–ù–´ –≤ v2.2
    # –í—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ø–µ—Ä—å –≤ run_full_comparison_mode

    def evaluate_method_fast(self, method: MatchingMethod, sample_askupo: pd.DataFrame,
                            eatool_df: pd.DataFrame, askupo_col: str, eatool_col: str) -> tuple:
        """–ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ—Ç–æ–¥–∞

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –¥–ª—è –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:
        (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 100%, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 90-99%, —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç)
        –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å —Ä–µ–∂–∏–º–æ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤.
        """
        results = self.test_method_optimized(method, sample_askupo, eatool_df,
                                            askupo_col, eatool_col)

        stats = self.calculate_statistics(results)

        # –õ–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 100% > 90-99% > —Å—Ä–µ–¥–Ω–∏–π)
        # –ò–¥–µ–Ω—Ç–∏—á–Ω–∞ –ª–æ–≥–∏–∫–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ —Ä–µ–∂–∏–º–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        score = (stats['perfect'], stats['high'], results['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'].mean())

        return score
    
    def test_method_optimized(self, method: MatchingMethod, askupo_df: pd.DataFrame,
                             eatool_df: pd.DataFrame, askupo_col: str = None, eatool_col: str = None) -> pd.DataFrame:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞

        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
        - –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        - –†–µ–∂–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ (2 —Å—Ç–æ–ª–±—Ü–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
        - –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ GUI –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        askupo_cols = self.selected_askupo_cols if self.selected_askupo_cols else [askupo_col if askupo_col else askupo_df.columns[0]]
        eatool_cols = self.selected_eatool_cols if self.selected_eatool_cols else [eatool_col if eatool_col else eatool_df.columns[0]]

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        eatool_combined_names = []
        eatool_original_values = []

        for _, row in eatool_df.iterrows():
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            combined = self.combine_columns(row, eatool_cols)
            eatool_combined_names.append(combined)
            eatool_original_values.append(combined)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        eatool_normalized = [self.normalize_string(name) for name in eatool_combined_names]
        choice_dict = {norm: orig for norm, orig in zip(eatool_normalized, eatool_original_values)}

        # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        eatool_row_dict = {}
        for idx, row in eatool_df.iterrows():
            combined = self.combine_columns(row, eatool_cols)
            eatool_row_dict[combined] = row

        results = []

        for _, row in askupo_df.iterrows():
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
            askupo_combined = self.combine_columns(row, askupo_cols)
            askupo_normalized = self.normalize_string(askupo_combined)

            # –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            best_match, best_score = method.find_best_match(
                askupo_normalized,
                eatool_normalized,
                choice_dict
            )

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            if best_score < AppConstants.THRESHOLD_REJECT:
                best_match = ""
                best_score = 0

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ v2.1 - —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            result_row = self._create_result_row_dict(
                askupo_combined=askupo_combined,
                best_match=best_match,
                best_score=best_score,
                method_name=method.name,
                askupo_row=row,
                askupo_df=askupo_df,
                eatool_row_dict=eatool_row_dict,
                eatool_df=eatool_df
            )

            results.append(result_row)

        return pd.DataFrame(results)
    
    def apply_method_optimized(self, method: MatchingMethod, askupo_df: pd.DataFrame, 
                               eatool_df: pd.DataFrame, askupo_col: str, eatool_col: str):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞"""
        
        progress_win = tk.Toplevel(self.root)
        progress_win.title(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞...")
        progress_win.geometry("600x250")
        progress_win.transient(self.root)
        progress_win.grab_set()
        
        tk.Label(progress_win, text=f"‚öôÔ∏è {method.name}", 
                font=("Arial", 12, "bold")).pack(pady=10)
        
        status_label = tk.Label(progress_win, text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", 
                               font=("Arial", 10))
        status_label.pack(pady=5)
        
        progress_label = tk.Label(progress_win, text="", font=("Arial", 9))
        progress_label.pack(pady=5)
        
        progress_bar = ttk.Progressbar(progress_win, length=500, mode='determinate')
        progress_bar.pack(pady=10)
        
        time_label = tk.Label(progress_win, text="", font=("Arial", 9), fg="gray")
        time_label.pack(pady=5)
        
        self.root.update()
        
        start_time = time.time()
        
        eatool_names = eatool_df[eatool_col].tolist()
        eatool_normalized = [self.normalize_string(name) for name in eatool_names]
        choice_dict = {norm: orig for norm, orig in zip(eatool_normalized, eatool_names)}

        # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏
        eatool_row_dict = {str(row[eatool_col]): row for _, row in eatool_df.iterrows()}

        status_label.config(text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π...")

        results = []
        total = len(askupo_df)
        progress_bar['maximum'] = total

        for idx, row in askupo_df.iterrows():
            askupo_name = str(row[askupo_col])
            askupo_normalized = self.normalize_string(askupo_name)

            best_match, best_score = method.find_best_match(
                askupo_normalized,
                eatool_normalized,
                choice_dict
            )

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            if best_score < AppConstants.THRESHOLD_REJECT:
                best_match = ""
                best_score = 0

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ v2.1 - —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            result_row = self._create_result_row_dict(
                askupo_combined=askupo_name,
                best_match=best_match,
                best_score=best_score,
                method_name=method.name,
                askupo_row=row,
                askupo_df=askupo_df,
                eatool_row_dict=eatool_row_dict,
                eatool_df=eatool_df
            )

            results.append(result_row)
            
            if idx % 10 == 0:
                elapsed = time.time() - start_time
                remaining = (elapsed / (idx + 1)) * (total - idx - 1)
                
                progress_bar['value'] = idx
                progress_label.config(text=f"{idx}/{total} –∑–∞–ø–∏—Å–µ–π ({int(idx/total*100)}%)")
                time_label.config(text=f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {int(elapsed)}—Å | –û—Å—Ç–∞–ª–æ—Å—å: ~{int(remaining)}—Å")
                self.root.update()
        
        progress_bar['value'] = total
        self.root.update()
        
        self.results = pd.DataFrame(results).sort_values('–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è', ascending=False)
        
        progress_win.destroy()
        
        self.display_results(method)
        self.notebook.select(2)
        
        elapsed_total = time.time() - start_time
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = self.calculate_statistics(self.results)
        
        stats_msg = (f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"‚è±Ô∏è –í—Ä–µ–º—è: {int(elapsed_total)}—Å ({elapsed_total/60:.1f} –º–∏–Ω)\n"
                    f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total']} –∑–∞–ø–∏—Å–µ–π\n\n"
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º):\n"
                    f"  ‚Ä¢ 100% (—Ç–æ—á–Ω–æ–µ):     {stats['perfect']} ({stats['perfect']/stats['total']*100:.1f}%)\n"
                    f"  ‚Ä¢ 90-99% (–≤—ã—Å–æ–∫–æ–µ):  {stats['high']} ({stats['high']/stats['total']*100:.1f}%)\n"
                    f"  ‚Ä¢ 70-89% (—Å—Ä–µ–¥–Ω–µ–µ):  {stats['medium']} ({stats['medium']/stats['total']*100:.1f}%)\n"
                    f"  ‚Ä¢ 50-69% (–Ω–∏–∑–∫–æ–µ):   {stats['low']} ({stats['low']/stats['total']*100:.1f}%)\n"
                    f"  ‚Ä¢ 1-49% (–æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ): {stats['very_low']} ({stats['very_low']/stats['total']*100:.1f}%)\n"
                    f"  ‚Ä¢ 0% (–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è): {stats['none']} ({stats['none']/stats['total']*100:.1f}%)\n\n"
                    f"‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞: {stats['check_sum']} = {stats['total']} {'‚úÖ' if stats['check_sum'] == stats['total'] else '‚ùå'}")
        
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ!", stats_msg)
    
    def display_comparison(self, comparison_results: List[Dict]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤"""
        self.methods_comparison = comparison_results
        
        for item in self.comparison_tree.get_children():
            self.comparison_tree.delete(item)
        
        for rank, stats in enumerate(comparison_results, 1):
            medal = "ü•á" if rank == 1 else "ü•à" if rank == 2 else "ü•â" if rank == 3 else f"#{rank}"
            
            values = (
                medal,
                stats['method'],
                stats['library'],
                stats['perfect'],      # –¢–æ–ª—å–∫–æ 100%
                stats['high'],         # –¢–æ–ª—å–∫–æ 90-99%
                f"{stats['avg_score']:.1f}%",
                f"{stats['time']:.1f}—Å"
            )
            
            tag = 'best' if rank == 1 else 'good' if rank <= 3 else ''
            self.comparison_tree.insert("", tk.END, values=values, tags=(tag,))
        
        self.comparison_tree.tag_configure('best', background='#D1FAE5')
        self.comparison_tree.tag_configure('good', background='#DBEAFE')
    
    def display_results(self, method: MatchingMethod):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        for widget in self.result_info_frame.winfo_children():
            widget.destroy()
        
        info_text = f"üî¨ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥: {method.name} (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {method.library})"
        tk.Label(self.result_info_frame, text=info_text, 
                font=("Arial", 11, "bold"), fg="#7C3AED").pack(anchor=tk.W)
        
        for widget in self.result_stats_frame.winfo_children():
            widget.destroy()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = self.calculate_statistics(self.results)
        
        stats_display = {
            '–í—Å–µ–≥–æ': stats['total'],
            '100%': stats['perfect'],
            '90-99%': stats['high'],
            '70-89%': stats['medium'],
            '50-69%': stats['low'],
            '1-49%': stats['very_low'],
            '0%': stats['none']
        }
        
        colors = ['#6B7280', '#10B981', '#3B82F6', '#F59E0B', '#F97316', '#FF6B6B', '#EF4444']
        
        for i, (label, value) in enumerate(stats_display.items()):
            frame = tk.Frame(self.result_stats_frame, bg=colors[i], padx=8, pady=5)
            frame.pack(side=tk.LEFT, padx=3)
            
            tk.Label(frame, text=str(value), font=("Arial", 15, "bold"), 
                    fg="white", bg=colors[i]).pack()
            tk.Label(frame, text=label, font=("Arial", 8), 
                    fg="white", bg=colors[i]).pack()
        
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        for idx, row in self.results.head(50).iterrows():
            # –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∏ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü
            col_names = self.results.columns.tolist()
            source1_col = [c for c in col_names if c.startswith('–ò—Å—Ç–æ—á–Ω–∏–∫ 1:')][0]
            source2_col = [c for c in col_names if c.startswith('–ò—Å—Ç–æ—á–Ω–∏–∫ 2:')][0]

            source1 = str(row[source1_col])
            source2 = str(row[source2_col]) if row[source2_col] else ""

            values = (
                idx + 1,
                source1[:50] + "..." if len(source1) > 50 else source1,
                source2[:50] + "..." if source2 and len(source2) > 50 else source2 if source2 else "‚ùå –ù–ï–¢",
                f"{row['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è']}%"
            )

            percent = row['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è']
            tag = 'perfect' if percent == 100 else 'high' if percent >= 90 else 'medium' if percent >= 70 else 'low' if percent >= 50 else 'very_low' if percent > 0 else 'none'

            self.results_tree.insert("", tk.END, values=values, tags=(tag,))
        
        self.results_tree.tag_configure('perfect', background='#D1FAE5')
        self.results_tree.tag_configure('high', background='#DBEAFE')
        self.results_tree.tag_configure('medium', background='#FEF3C7')
        self.results_tree.tag_configure('low', background='#FED7AA')
        self.results_tree.tag_configure('very_low', background='#FFE4E1')
        self.results_tree.tag_configure('none', background='#FEE2E2')
    
    def export_comparison(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤"""
        if not self.methods_comparison:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        save_path = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            initialfile="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ_–º–µ—Ç–æ–¥–æ–≤_—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.xlsx",
            filetypes=[("Excel files", "*.xlsx")]
        )
        
        if not save_path:
            return
        
        df = pd.DataFrame([
            {
                '–ú–µ—Å—Ç–æ': i + 1,
                '–ú–µ—Ç–æ–¥': stats['method'],
                '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞': stats['library'],
                '100% (—Ç–æ—á–Ω–æ–µ)': stats['perfect'],
                '90-99% (–≤—ã—Å–æ–∫–æ–µ)': stats['high'],
                '70-89% (—Å—Ä–µ–¥–Ω–µ–µ)': stats['medium'],
                '–°—Ä–µ–¥–Ω–∏–π %': round(stats['avg_score'], 1),
                '–í—Ä–µ–º—è (—Å–µ–∫)': round(stats['time'], 2)
            }
            for i, stats in enumerate(self.methods_comparison)
        ])
        
        try:
            with pd.ExcelWriter(save_path, engine='xlsxwriter') as writer:
                df.to_excel(writer, sheet_name='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤', index=False)
                
                workbook = writer.book
                worksheet = writer.sheets['–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤']
                
                header_format = workbook.add_format({
                    'bold': True,
                    'bg_color': '#7C3AED',
                    'font_color': 'white',
                    'align': 'center',
                    'valign': 'vcenter',
                    'border': 1
                })
                
                for col_num, value in enumerate(df.columns.values):
                    worksheet.write(0, col_num, value, header_format)
                
                worksheet.set_column('A:A', 10)
                worksheet.set_column('B:B', 40)
                worksheet.set_column('C:H', 18)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{save_path}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{str(e)}")
    
    def export_full(self):
        if self.results is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        self.export_excel(self.results, "–ü–æ–ª–Ω—ã–π_–æ—Ç—á–µ—Ç_—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.xlsx", include_stats=True)
    
    def export_perfect(self):
        if self.results is None:
            return
        data = self.results[self.results['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'] == 100]
        self.export_excel(data, "–¢–æ—á–Ω—ã–µ_—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è_100%.xlsx")
    
    def export_problems(self):
        if self.results is None:
            return
        data = self.results[self.results['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'] < 90]
        self.export_excel(data, "–¢—Ä–µ–±—É—é—Ç_–ø—Ä–æ–≤–µ—Ä–∫–∏_–º–µ–Ω–µ–µ_90%.xlsx")
    
    def export_no_match(self):
        if self.results is None:
            return
        data = self.results[self.results['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'] == 0]
        self.export_excel(data, "–ë–µ–∑_—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π_0%.xlsx")
    
    def export_excel(self, data: pd.DataFrame, filename: str, include_stats: bool = False):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
        save_path = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            initialfile=filename,
            filetypes=[("Excel files", "*.xlsx")]
        )
        
        if not save_path:
            return
        
        try:
            data_to_export = data.copy()

            # –ó–∞–º–µ–Ω—è–µ–º NaN –∏ inf –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
            data_to_export = data_to_export.replace([np.nan, np.inf, -np.inf], "")

            data_to_export.insert(0, '‚Ññ', range(1, len(data_to_export) + 1))

            with pd.ExcelWriter(save_path, engine='xlsxwriter',
                              engine_kwargs={'options': {'nan_inf_to_errors': True}}) as writer:
                data_to_export.to_excel(writer, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', index=False)
                
                workbook = writer.book
                worksheet = writer.sheets['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã']
                
                header_format = workbook.add_format({
                    'bold': True,
                    'bg_color': '#7C3AED',
                    'font_color': 'white',
                    'align': 'center',
                    'valign': 'vcenter',
                    'border': 1
                })
                
                for col_num, value in enumerate(data_to_export.columns.values):
                    worksheet.write(0, col_num, value, header_format)

                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
                worksheet.set_column('A:A', 8)  # –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                # –°—Ç–æ–ª–±—Ü—ã B –∏ –¥–∞–ª–µ–µ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                for col_num in range(1, len(data_to_export.columns)):
                    col_name = data_to_export.columns[col_num]
                    if '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö' in str(col_name):
                        worksheet.set_column(col_num, col_num, 45)  # –®–∏—Ä–æ–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π
                    elif col_name == '–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è':
                        worksheet.set_column(col_num, col_num, 12)  # –£–∑–∫–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                    elif col_name == '–ú–µ—Ç–æ–¥':
                        worksheet.set_column(col_num, col_num, 35)  # –°—Ä–µ–¥–Ω–∏–π –¥–ª—è –º–µ—Ç–æ–¥–∞
                    else:
                        worksheet.set_column(col_num, col_num, 20)  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ 2
                
                formats = {
                    100: workbook.add_format({'bg_color': '#D1FAE5', 'border': 1}),
                    90: workbook.add_format({'bg_color': '#DBEAFE', 'border': 1}),
                    70: workbook.add_format({'bg_color': '#FEF3C7', 'border': 1}),
                    50: workbook.add_format({'bg_color': '#FED7AA', 'border': 1}),
                    1: workbook.add_format({'bg_color': '#FFE4E1', 'border': 1}),
                    0: workbook.add_format({'bg_color': '#FEE2E2', 'border': 1})
                }
                
                for row_num in range(1, len(data_to_export) + 1):
                    percent = data_to_export.iloc[row_num - 1]['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è']
                    
                    if percent == 100:
                        fmt = formats[100]
                    elif percent >= 90:
                        fmt = formats[90]
                    elif percent >= 70:
                        fmt = formats[70]
                    elif percent >= 50:
                        fmt = formats[50]
                    elif percent > 0:
                        fmt = formats[1]
                    else:
                        fmt = formats[0]
                    
                    for col_num in range(len(data_to_export.columns)):
                        worksheet.write(row_num, col_num, 
                                      data_to_export.iloc[row_num - 1, col_num], fmt)
                
                if include_stats and self.results is not None:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    stats = self.calculate_statistics(self.results)
                    
                    stats_data = pd.DataFrame([
                        {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': stats['total'], '–ü—Ä–æ—Ü–µ–Ω—Ç': '100%'},
                        {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '100% (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': stats['perfect'], '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{stats['perfect']/stats['total']*100:.1f}%"},
                        {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '90-99% (–≤—ã—Å–æ–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': stats['high'], '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{stats['high']/stats['total']*100:.1f}%"},
                        {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '70-89% (—Å—Ä–µ–¥–Ω–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': stats['medium'], '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{stats['medium']/stats['total']*100:.1f}%"},
                        {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '50-69% (–Ω–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': stats['low'], '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{stats['low']/stats['total']*100:.1f}%"},
                        {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '1-49% (–æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': stats['very_low'], '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{stats['very_low']/stats['total']*100:.1f}%"},
                        {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '0% (–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': stats['none'], '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{stats['none']/stats['total']*100:.1f}%"},
                        {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '---', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': '---', '–ü—Ä–æ—Ü–µ–Ω—Ç': '---'},
                        {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': stats['check_sum'], '–ü—Ä–æ—Ü–µ–Ω—Ç': '‚úÖ' if stats['check_sum'] == stats['total'] else '‚ùå –û–®–ò–ë–ö–ê!'}
                    ])
                    stats_data.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{save_path}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:\n{str(e)}")

    def export_full_comparison_to_excel(self, default_filename=None):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ Excel

        Args:
            default_filename: –ò–º—è —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not self.full_comparison_results:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        if default_filename is None:
            default_filename = "–ü–æ–ª–Ω–æ–µ_—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_–≤—Å–µ—Ö_–º–µ—Ç–æ–¥–æ–≤.xlsx"

        save_path = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            initialfile=default_filename,
            filetypes=[("Excel files", "*.xlsx")]
        )

        if not save_path:
            return

        try:
            methods_data = self.full_comparison_results['methods_data']
            comparison_stats = self.full_comparison_results['comparison_stats']

            # –û—á–∏—â–∞–µ–º –≤—Å–µ DataFrame –æ—Ç NaN –∏ inf
            cleaned_methods_data = {}
            for method_name, df in methods_data.items():
                cleaned_df = df.copy()
                cleaned_df = cleaned_df.replace([np.nan, np.inf, -np.inf], "")
                cleaned_methods_data[method_name] = cleaned_df

            with pd.ExcelWriter(save_path, engine='xlsxwriter',
                              engine_kwargs={'options': {'nan_inf_to_errors': True}}) as writer:
                workbook = writer.book

                # –§–æ—Ä–º–∞—Ç—ã
                header_format = workbook.add_format({
                    'bold': True,
                    'bg_color': '#7C3AED',
                    'font_color': 'white',
                    'align': 'center',
                    'valign': 'vcenter',
                    'border': 1
                })

                formats = {
                    100: workbook.add_format({'bg_color': '#D1FAE5', 'border': 1}),
                    90: workbook.add_format({'bg_color': '#DBEAFE', 'border': 1}),
                    70: workbook.add_format({'bg_color': '#FEF3C7', 'border': 1}),
                    50: workbook.add_format({'bg_color': '#FED7AA', 'border': 1}),
                    1: workbook.add_format({'bg_color': '#FFE4E1', 'border': 1}),
                    0: workbook.add_format({'bg_color': '#FEE2E2', 'border': 1})
                }

                # 1. –õ–∏—Å—Ç "–°–≤–æ–¥–∫–∞" - —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
                summary_df = pd.DataFrame([
                    {
                        'üèÜ –ú–µ—Å—Ç–æ': i + 1,
                        '–ú–µ—Ç–æ–¥': stats['method'],
                        '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞': stats['library'],
                        '–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π': stats['total'],
                        '100% (—Ç–æ—á–Ω–æ–µ)': stats['perfect'],
                        '90-99% (–≤—ã—Å–æ–∫–æ–µ)': stats['high'],
                        '70-89% (—Å—Ä–µ–¥–Ω–µ–µ)': stats['medium'],
                        '50-69% (–Ω–∏–∑–∫–æ–µ)': stats['low'],
                        '1-49% (–æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ)': stats['very_low'],
                        '0% (–Ω–µ—Ç)': stats['none'],
                        '–°—Ä–µ–¥–Ω–∏–π %': round(stats['avg_score'], 1),
                        '–í—Ä–µ–º—è (—Å–µ–∫)': round(stats['time'], 2)
                    }
                    for i, stats in enumerate(comparison_stats)
                ])

                summary_df.to_excel(writer, sheet_name='üìä –°–≤–æ–¥–∫–∞', index=False)
                worksheet = writer.sheets['üìä –°–≤–æ–¥–∫–∞']

                for col_num, value in enumerate(summary_df.columns.values):
                    worksheet.write(0, col_num, value, header_format)

                worksheet.set_column('A:A', 10)
                worksheet.set_column('B:B', 40)
                worksheet.set_column('C:L', 15)

                # 2. –õ–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
                for method_name, results_df in cleaned_methods_data.items():
                    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã —Å–Ω–∞—á–∞–ª–∞
                    sheet_name = method_name

                    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ (–º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ Excel)
                    sheet_name = ''.join(char for char in sheet_name if ord(char) < 128)

                    # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ Excel
                    invalid_chars = [':', '\\', '/', '?', '*', '[', ']']
                    for char in invalid_chars:
                        sheet_name = sheet_name.replace(char, '_')

                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                    sheet_name = sheet_name.strip()

                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ (Excel –ª–∏–º–∏—Ç 31 —Å–∏–º–≤–æ–ª)
                    if len(sheet_name) > 31:
                        sheet_name = sheet_name[:28] + "..."

                    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä
                    if not sheet_name:
                        sheet_name = f"Method_{list(cleaned_methods_data.keys()).index(method_name) + 1}"

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                    export_df = results_df.copy()
                    export_df.insert(0, '‚Ññ', range(1, len(export_df) + 1))

                    export_df.to_excel(writer, sheet_name=sheet_name, index=False)
                    worksheet = writer.sheets[sheet_name]

                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    for col_num, value in enumerate(export_df.columns.values):
                        worksheet.write(0, col_num, value, header_format)

                    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
                    worksheet.set_column('A:A', 8)  # –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                    for col_num in range(1, len(export_df.columns)):
                        col_name = export_df.columns[col_num]
                        if '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö' in str(col_name):
                            worksheet.set_column(col_num, col_num, 45)  # –®–∏—Ä–æ–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π
                        elif col_name == '–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è':
                            worksheet.set_column(col_num, col_num, 12)  # –£–∑–∫–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                        elif col_name == '–ú–µ—Ç–æ–¥':
                            worksheet.set_column(col_num, col_num, 35)  # –°—Ä–µ–¥–Ω–∏–π –¥–ª—è –º–µ—Ç–æ–¥–∞
                        else:
                            worksheet.set_column(col_num, col_num, 20)  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ 2

                    # –¶–≤–µ—Ç–æ–≤–∞—è —Ä–∞—Å–∫—Ä–∞—Å–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    for row_num in range(1, len(export_df) + 1):
                        percent = export_df.iloc[row_num - 1]['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è']

                        if percent == 100:
                            fmt = formats[100]
                        elif percent >= 90:
                            fmt = formats[90]
                        elif percent >= 70:
                            fmt = formats[70]
                        elif percent >= 50:
                            fmt = formats[50]
                        elif percent > 0:
                            fmt = formats[1]
                        else:
                            fmt = formats[0]

                        for col_num in range(len(export_df.columns)):
                            worksheet.write(row_num, col_num,
                                          export_df.iloc[row_num - 1, col_num], fmt)

            messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                              f"üìÅ –§–∞–π–ª: {Path(save_path).name}\n"
                              f"üìä –õ–∏—Å—Ç–æ–≤: {len(cleaned_methods_data) + 1}\n"
                              f"   ‚Ä¢ –°–≤–æ–¥–∫–∞: 1 –ª–∏—Å—Ç\n"
                              f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–µ—Ç–æ–¥–æ–≤: {len(cleaned_methods_data)} –ª–∏—Å—Ç–æ–≤")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:\n{str(e)}")


def main():
    root = tk.Tk()
    app = ExpertMatcher(root)
    root.mainloop()


if __name__ == "__main__":
    main()