"""
üî¨ –≠–ö–°–ü–ï–†–¢–ù–ê–Ø –í–ï–†–°–ò–Ø Excel Matcher (–ò–°–ü–†–ê–í–õ–ï–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê!)
–° –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π

–ò–°–ü–†–ê–í–õ–ï–ù–û:
    ‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–ü–ï–†–¨ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú, –ù–ï –ù–ê–ö–û–ü–ò–¢–ï–õ–¨–ù–ê–Ø!
    ‚úÖ –°—É–º–º–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π = –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π
    ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç rapidfuzz.process.extractOne (–≤ 100 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ)
    ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ –¢–û–ü-5)
    ‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Excel —Å—Ç–æ–ª–±—Ü–∞–º–∏
    ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

–£–°–¢–ê–ù–û–í–ö–ê:
    pip install pandas openpyxl xlsxwriter rapidfuzz textdistance jellyfish

–ó–ê–ü–£–°–ö:
    python expert_matcher.py
"""

import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import pandas as pd
import numpy as np
from pathlib import Path
import time
from typing import Dict, List, Tuple, Callable
import re

# –ò–º–ø–æ—Ä—Ç –∏–∑ –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
from src.constants import AppConstants, NormalizationConstants
from src.help_content import HelpContent
from src.models import MatchingMethod, MatchResult, MethodStatistics
from src.matching_engine import MatchingEngine, NormalizationOptions
from src.excel_exporter import ExcelExporter
from src.data_manager import DataManager
from src.ui_manager import UIManager
from src.ui_components import (
    ScrollableFrame, TreeviewWithScrollbar, MethodSelectorListbox,
    FileSelectorWidget, create_label_frame, create_info_label_frame,
    create_styled_button, create_title_header
)

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
try:
    from rapidfuzz import fuzz, process
    RAPIDFUZZ_AVAILABLE = True
except ImportError:
    RAPIDFUZZ_AVAILABLE = False
    print("‚ö†Ô∏è rapidfuzz –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install rapidfuzz")

try:
    import textdistance
    TEXTDISTANCE_AVAILABLE = True
except ImportError:
    TEXTDISTANCE_AVAILABLE = False
    print("‚ö†Ô∏è textdistance –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install textdistance")

try:
    import jellyfish
    JELLYFISH_AVAILABLE = True
except ImportError:
    JELLYFISH_AVAILABLE = False
    print("‚ö†Ô∏è jellyfish –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install jellyfish")

try:
    from transliterate import translit
    TRANSLITERATE_AVAILABLE = True
except ImportError:
    TRANSLITERATE_AVAILABLE = False
    print("‚ö†Ô∏è transliterate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install transliterate")


# ============================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ú–û–î–ï–õ–ò (–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ src.*)
# ============================================================================
# AppConstants, NormalizationConstants - –∏–∑ src.constants
# HelpContent - –∏–∑ src.help_content
# MatchingMethod, MatchResult, MethodStatistics - –∏–∑ src.models


class ExpertMatcher:
    """–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self, root):
        self.root = root
        self.root.title(AppConstants.APP_TITLE)

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ç —ç–∫—Ä–∞–Ω–∞
        window_width = max(AppConstants.WINDOW_MIN_WIDTH, int(screen_width * AppConstants.WINDOW_SCALE))
        window_height = max(AppConstants.WINDOW_MIN_HEIGHT, int(screen_height * AppConstants.WINDOW_SCALE))

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2

        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        self.root.minsize(AppConstants.WINDOW_MIN_WIDTH, AppConstants.WINDOW_MIN_HEIGHT)

        # –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        self.data_manager = DataManager()

        self.results = None
        self.methods_comparison = None
        self.full_comparison_results = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤

        # LEGACY: –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º data_manager)
        self.askupo_file = None
        self.eatool_file = None
        self.askupo_columns = []
        self.eatool_columns = []
        self.selected_askupo_cols = []
        self.selected_eatool_cols = []
        self.inherit_askupo_cols_var = tk.BooleanVar(value=True)  # –ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
        self.inherit_eatool_cols_var = tk.BooleanVar(value=True)  # –ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2
        self.multi_column_mode_var = tk.BooleanVar(value=False)    # –†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Å—Ç–æ–ª–±—Ü–∞–º
        self.selected_methods = []  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ "–í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤"

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        self.norm_remove_legal_var = tk.BooleanVar(value=False)        # –£–¥–∞–ª—è—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã (–û–û–û, Ltd, Inc)
        self.norm_remove_versions_var = tk.BooleanVar(value=False)     # –£–¥–∞–ª—è—Ç—å –≤–µ—Ä—Å–∏–∏ (2021, v4.x, R2, SP1)
        self.norm_remove_stopwords_var = tk.BooleanVar(value=False)    # –£–¥–∞–ª—è—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ (–∏, –≤, the, a)
        self.norm_transliterate_var = tk.BooleanVar(value=False)       # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã ‚Üí –ª–∞—Ç–∏–Ω–∏—Ü–∞
        self.norm_remove_punctuation_var = tk.BooleanVar(value=True)   # –£–¥–∞–ª—è—Ç—å –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ)

        # –°–æ–∑–¥–∞—ë–º –¥–≤–∏–∂–æ–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        self.engine = self._create_matching_engine()

        # –°–æ–∑–¥–∞—ë–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä Excel
        self.exporter = ExcelExporter(self.engine, self.results)

        self.methods = self.register_all_methods()

        # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä UI (–¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫)
        self.ui_manager = UIManager(self)
        self.ui_manager.create_widgets()

    def _create_matching_engine(self) -> MatchingEngine:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
        options = NormalizationOptions(
            remove_legal=self.norm_remove_legal_var.get(),
            remove_versions=self.norm_remove_versions_var.get(),
            remove_stopwords=self.norm_remove_stopwords_var.get(),
            transliterate=self.norm_transliterate_var.get(),
            remove_punctuation=self.norm_remove_punctuation_var.get()
        )
        return MatchingEngine(options)

    def _update_matching_engine(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.engine = self._create_matching_engine()
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–≤–∏–∂–æ–∫ –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–µ
        self.exporter.engine = self.engine
        
    def register_all_methods(self) -> List[MatchingMethod]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        methods = []
        
        if RAPIDFUZZ_AVAILABLE:
            methods.extend([
                MatchingMethod("RapidFuzz: WRatio",
                             fuzz.WRatio, "rapidfuzz",
                             use_process=True, scorer=fuzz.WRatio),
                MatchingMethod("RapidFuzz: Token Set",
                             fuzz.token_set_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.token_set_ratio),
                MatchingMethod("RapidFuzz: Token Sort",
                             fuzz.token_sort_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.token_sort_ratio),
                MatchingMethod("RapidFuzz: Partial Ratio",
                             fuzz.partial_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.partial_ratio),
                MatchingMethod("RapidFuzz: Ratio",
                             fuzz.ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.ratio),
                MatchingMethod("RapidFuzz: QRatio",
                             fuzz.QRatio, "rapidfuzz",
                             use_process=True, scorer=fuzz.QRatio),
                MatchingMethod("RapidFuzz: Token Ratio",
                             fuzz.token_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.token_ratio),
                MatchingMethod("RapidFuzz: Partial Token Ratio",
                             fuzz.partial_token_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.partial_token_ratio),
                MatchingMethod("RapidFuzz: Partial Token Set",
                             fuzz.partial_token_set_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.partial_token_set_ratio),
                MatchingMethod("RapidFuzz: Partial Token Sort",
                             fuzz.partial_token_sort_ratio, "rapidfuzz",
                             use_process=True, scorer=fuzz.partial_token_sort_ratio)
            ])

        if TEXTDISTANCE_AVAILABLE:
            methods.extend([
                MatchingMethod("TextDistance: Jaro-Winkler",
                             textdistance.jaro_winkler, "textdistance"),
                MatchingMethod("TextDistance: Jaro",
                             textdistance.jaro, "textdistance"),
                MatchingMethod("TextDistance: Jaccard",
                             textdistance.jaccard, "textdistance"),
                MatchingMethod("TextDistance: Sorensen-Dice",
                             textdistance.sorensen_dice, "textdistance"),
                MatchingMethod("TextDistance: Cosine",
                             textdistance.cosine, "textdistance"),
            ])

        if JELLYFISH_AVAILABLE:
            methods.extend([
                MatchingMethod("Jellyfish: Jaro-Winkler",
                             jellyfish.jaro_winkler_similarity, "jellyfish"),
                MatchingMethod("Jellyfish: Jaro",
                             jellyfish.jaro_similarity, "jellyfish"),
            ])

        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–í–ü–†)
        methods.append(
            MatchingMethod("Exact Match (–í–ü–†)",
                         self.exact_match_func, "builtin",
                         use_process=False, scorer=None)
        )

        return methods
    
    def exact_match_func(self, s1: str, s2: str) -> float:
        """–§—É–Ω–∫—Ü–∏—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –º–µ—Ç–æ–¥–∞ –í–ü–†

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 100.0 –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏),
        0.0 –¥–ª—è –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        """
        norm_s1 = self.engine.normalize_string(s1)
        norm_s2 = self.engine.normalize_string(s2)
        return 100.0 if norm_s1 == norm_s2 else 0.0

    # –ê–ª–∏–∞—Å—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–¥–µ–ª–µ–≥–∏—Ä—É—é—Ç –≤ engine)
    def normalize_string(self, s: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ (–¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤ engine)"""
        return self.engine.normalize_string(s)

    def combine_columns(self, row: pd.Series, columns: List[str]) -> str:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ (–¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤ engine)"""
        return self.engine.combine_columns(row, columns)

    def calculate_statistics(self, results_df: pd.DataFrame) -> Dict:
        """–†–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤ engine)"""
        return self.engine.calculate_statistics(results_df)

    # ========================================================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ v2.1)
    # ========================================================================

    def _get_column_display_name(self, columns: List[str]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ (–¥–µ–ª–µ–≥–∞—Ü–∏—è –∫ DataManager)"""
        return self.data_manager.get_column_display_name(columns)

    def _get_selected_columns(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å DataManager)"""
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å data_manager –µ—Å–ª–∏ —Ç–∞–º –ø—É—Å—Ç–æ, –Ω–æ legacy –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if not self.data_manager.selected_source1_cols and self.selected_askupo_cols:
            self.data_manager.selected_source1_cols = self.selected_askupo_cols
        if not self.data_manager.selected_source2_cols and self.selected_eatool_cols:
            self.data_manager.selected_source2_cols = self.selected_eatool_cols

        cols1, cols2 = self.data_manager.get_selected_columns()
        # –û–±–Ω–æ–≤–ª—è–µ–º legacy –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.selected_askupo_cols = cols1
        self.selected_eatool_cols = cols2
        return cols1, cols2

    def _create_result_row_dict(self, askupo_combined: str, best_match: str,
                                best_score: float, method_name: str,
                                askupo_row: pd.Series, askupo_df: pd.DataFrame,
                                eatool_row_dict: dict, eatool_df: pd.DataFrame) -> dict:
        """–°–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—É—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞)

        Args:
            askupo_combined: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
            best_match: –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2
            best_score: –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            method_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
            askupo_row: —Å—Ç—Ä–æ–∫–∞ –∏–∑ DataFrame –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
            askupo_df: –≤–µ—Å—å DataFrame –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
            eatool_row_dict: —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2
            eatool_df: –≤–µ—Å—å DataFrame –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        askupo_cols, eatool_cols = self._get_selected_columns()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        askupo_col_name = self._get_column_display_name(askupo_cols)
        eatool_col_name = self._get_column_display_name(eatool_cols)

        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        result_row = {
            f'{AppConstants.COL_SOURCE1_PREFIX} {askupo_col_name}': askupo_combined,
            f'{AppConstants.COL_SOURCE2_PREFIX} {eatool_col_name}': best_match,
            AppConstants.COL_PERCENT: round(best_score, 1),
            AppConstants.COL_METHOD: method_name
        }

        # –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
        if self.inherit_askupo_cols_var.get():
            for col in askupo_df.columns:
                if col not in askupo_cols:
                    result_row[f"{AppConstants.COL_SOURCE1_PREFIX} {col}"] = askupo_row[col]

        # –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2
        if best_match and self.inherit_eatool_cols_var.get():
            matched_row = eatool_row_dict.get(best_match)
            if matched_row is not None:
                for col in eatool_df.columns:
                    if col not in eatool_cols:
                        result_row[f"{AppConstants.COL_SOURCE2_PREFIX} {col}"] = matched_row[col]
        elif self.inherit_eatool_cols_var.get():
            for col in eatool_df.columns:
                if col not in eatool_cols:
                    result_row[f"{AppConstants.COL_SOURCE2_PREFIX} {col}"] = ""

        return result_row

    # ========================================================================
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê (—Ç–µ–ø–µ—Ä—å –≤ src.matching_engine.MatchingEngine)
    # ========================================================================
    # –ú–µ—Ç–æ–¥ calculate_statistics –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ MatchingEngine
    

    # ========================================================================
    # UI –ú–ï–¢–û–î–´ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ UIManager)
    # ========================================================================
    # –ú–µ—Ç–æ–¥—ã create_widgets, create_help_tab, create_setup_tab,
    # create_comparison_tab, create_results_tab –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ src/ui_manager.py
    #
    # –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π UI (on_*_column_select, select_all_methods,
    # enable_all_normalization –∏ –¥—Ä.) –æ—Å—Ç–∞—é—Ç—Å—è –≤ ExpertMatcher, —Ç–∞–∫ –∫–∞–∫
    # –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ UIManager —á–µ—Ä–µ–∑ self.parent.*

    def read_data_file(self, filename: str, nrows=None) -> pd.DataFrame:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ Excel –∏–ª–∏ CSV —Ñ–∞–π–ª–∞ (–¥–µ–ª–µ–≥–∞—Ü–∏—è –∫ DataManager)"""
        return self.data_manager.read_data_file(filename, nrows)

    def validate_excel_file(self, filename: str) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è Excel –∏–ª–∏ CSV —Ñ–∞–π–ª–∞ (–¥–µ–ª–µ–≥–∞—Ü–∏—è –∫ DataManager)"""
        return self.data_manager.validate_file(filename)

    def select_askupo(self):
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö 1 (—Ü–µ–ª–µ–≤–æ–π)",
            filetypes=[("Data files", "*.xlsx *.xls *.csv"), ("Excel files", "*.xlsx *.xls"), ("CSV files", "*.csv"), ("All files", "*.*")]
        )
        if filename:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DataManager –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∞–π–ª–∞
            is_valid, message = self.data_manager.set_source1_file(filename)

            if not is_valid:
                messagebox.showerror("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö 1",
                                   f"–§–∞–π–ª –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É:\n\n{message}\n\n"
                                   f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                                   f"‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–Ω–µ –ø—É—Å—Ç–æ–π)\n"
                                   f"‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∏ —Å—Ç—Ä–æ–∫–∏\n"
                                   f"‚Ä¢ –§–æ—Ä–º–∞—Ç: .xlsx, .xls –∏–ª–∏ .csv")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º legacy –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            self.askupo_file = self.data_manager.source1_file
            self.askupo_columns = self.data_manager.source1_columns
            self.selected_askupo_cols = self.data_manager.selected_source1_cols

            # –û–±–Ω–æ–≤–ª—è–µ–º GUI
            display_name = self.data_manager.get_short_filename(filename)
            self.askupo_label.config(text=f"‚úÖ {display_name}", fg="green", font=("Arial", 9, "bold"))

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ GUI
            self.load_askupo_columns()
            self.check_ready()
    
    def select_eatool(self):
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö 2",
            filetypes=[("Data files", "*.xlsx *.xls *.csv"), ("Excel files", "*.xlsx *.xls"), ("CSV files", "*.csv"), ("All files", "*.*")]
        )
        if filename:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DataManager –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∞–π–ª–∞
            is_valid, message = self.data_manager.set_source2_file(filename)

            if not is_valid:
                messagebox.showerror("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö 2",
                                   f"–§–∞–π–ª –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É:\n\n{message}\n\n"
                                   f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                                   f"‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–Ω–µ –ø—É—Å—Ç–æ–π)\n"
                                   f"‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∏ —Å—Ç—Ä–æ–∫–∏\n"
                                   f"‚Ä¢ –§–æ—Ä–º–∞—Ç: .xlsx, .xls –∏–ª–∏ .csv")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º legacy –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            self.eatool_file = self.data_manager.source2_file
            self.eatool_columns = self.data_manager.source2_columns
            self.selected_eatool_cols = self.data_manager.selected_source2_cols

            # –û–±–Ω–æ–≤–ª—è–µ–º GUI
            display_name = self.data_manager.get_short_filename(filename)
            self.eatool_label.config(text=f"‚úÖ {display_name}", fg="green", font=("Arial", 9, "bold"))

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ GUI
            self.load_eatool_columns()
            self.check_ready()

    def check_ready(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ (–¥–µ–ª–µ–≥–∞—Ü–∏—è –∫ DataManager)"""
        if self.data_manager.is_ready():
            self.process_btn.config(state=tk.NORMAL)

    def load_askupo_columns(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1"""
        try:
            df = self.read_data_file(self.askupo_file, nrows=0)  # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self.askupo_columns = list(df.columns)

            # –û–±–Ω–æ–≤–ª—è–µ–º GUI –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            if hasattr(self, 'askupo_col_listbox'):
                self.askupo_col_listbox.delete(0, tk.END)
                for col in self.askupo_columns:
                    self.askupo_col_listbox.insert(tk.END, col)
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                if self.askupo_columns:
                    self.askupo_col_listbox.selection_set(0)
                    self.selected_askupo_cols = [self.askupo_columns[0]]
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1:\n{str(e)}")

    def load_eatool_columns(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2"""
        try:
            df = self.read_data_file(self.eatool_file, nrows=0)  # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self.eatool_columns = list(df.columns)

            # –û–±–Ω–æ–≤–ª—è–µ–º GUI –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            if hasattr(self, 'eatool_col_listbox'):
                self.eatool_col_listbox.delete(0, tk.END)
                for col in self.eatool_columns:
                    self.eatool_col_listbox.insert(tk.END, col)
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                if self.eatool_columns:
                    self.eatool_col_listbox.selection_set(0)
                    self.selected_eatool_cols = [self.eatool_columns[0]]
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2:\n{str(e)}")

    def on_askupo_column_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1"""
        selected_indices = self.askupo_col_listbox.curselection()
        self.selected_askupo_cols = [self.askupo_columns[i] for i in selected_indices]

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º 2 —Å—Ç–æ–ª–±—Ü–∞
        if len(selected_indices) > 2:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                 "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 2 —Å—Ç–æ–ª–±—Ü–∞.\n"
                                 "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
            # –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä
            self.askupo_col_listbox.selection_clear(selected_indices[-1])
            self.selected_askupo_cols = self.selected_askupo_cols[:-1]

    def on_eatool_column_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2"""
        selected_indices = self.eatool_col_listbox.curselection()
        self.selected_eatool_cols = [self.eatool_columns[i] for i in selected_indices]

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º 2 —Å—Ç–æ–ª–±—Ü–∞
        if len(selected_indices) > 2:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                 "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 2 —Å—Ç–æ–ª–±—Ü–∞.\n"
                                 "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
            # –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä
            self.eatool_col_listbox.selection_clear(selected_indices[-1])
            self.selected_eatool_cols = self.selected_eatool_cols[:-1]

    def select_all_methods(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤ —Å–ø–∏—Å–∫–µ"""
        self.methods_listbox.selection_set(0, tk.END)

    def deselect_all_methods(self):
        """–°–Ω—è—Ç—å –≤—ã–±–æ—Ä –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤"""
        self.methods_listbox.selection_clear(0, tk.END)

    def enable_all_normalization(self):
        """–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ –æ–ø—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.norm_remove_legal_var.set(True)
        self.norm_remove_versions_var.set(True)
        self.norm_remove_stopwords_var.set(True)
        self.norm_transliterate_var.set(True)
        self.norm_remove_punctuation_var.set(True)
        messagebox.showinfo("‚úì –û–ø—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏",
                           "–í—Å–µ –æ–ø—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã!\n\n"
                           "–≠—Ç–æ –ø–æ–≤—ã—Å–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ 30-50%.")

    def disable_all_normalization(self):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –æ–ø—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.norm_remove_legal_var.set(False)
        self.norm_remove_versions_var.set(False)
        self.norm_remove_stopwords_var.set(False)
        self.norm_transliterate_var.set(False)
        self.norm_remove_punctuation_var.set(False)
        messagebox.showinfo("‚úó –û–ø—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏",
                           "–í—Å–µ –æ–ø—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n\n"
                           "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (lowercase + trim).")

    def get_selected_methods(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        selected_indices = self.methods_listbox.curselection()
        return [self.methods[i] for i in selected_indices]

    def start_processing(self):
        """–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        if not self.selected_askupo_cols:
            messagebox.showerror("–û—à–∏–±–∫–∞",
                               "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö 1!\n\n"
                               "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
            return

        if not self.selected_eatool_cols:
            messagebox.showerror("–û—à–∏–±–∫–∞",
                               "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö 2!\n\n"
                               "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        if self.multi_column_mode_var.get():
            if len(self.selected_askupo_cols) != 2:
                messagebox.showerror("–û—à–∏–±–∫–∞",
                                   "–†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ 2 —Å—Ç–æ–ª–±—Ü–∞–º —Ç—Ä–µ–±—É–µ—Ç –≤—ã–±–æ—Ä–∞ —Ä–æ–≤–Ω–æ 2 —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ 1!\n\n"
                                   f"–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–æ: {len(self.selected_askupo_cols)}")
                return
            if len(self.selected_eatool_cols) != 2:
                messagebox.showerror("–û—à–∏–±–∫–∞",
                                   "–†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ 2 —Å—Ç–æ–ª–±—Ü–∞–º —Ç—Ä–µ–±—É–µ—Ç –≤—ã–±–æ—Ä–∞ —Ä–æ–≤–Ω–æ 2 —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –ò—Å—Ç–æ—á–Ω–∏–∫–∞ 2!\n\n"
                                   f"–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–æ: {len(self.selected_eatool_cols)}")
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        if len(self.selected_askupo_cols) != len(self.selected_eatool_cols):
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                  "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å!\n\n"
                                  f"–ò—Å—Ç–æ—á–Ω–∏–∫ 1: {len(self.selected_askupo_cols)} —Å—Ç–æ–ª–±—Ü–æ–≤\n"
                                  f"–ò—Å—Ç–æ—á–Ω–∏–∫ 2: {len(self.selected_eatool_cols)} —Å—Ç–æ–ª–±—Ü–æ–≤\n\n"
                                  "–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –í–°–ï–• —Ä–µ–∂–∏–º–æ–≤
        mode = self.mode_var.get()
        selected_methods = self.get_selected_methods()

        # –ï—Å–ª–∏ –º–µ—Ç–æ–¥—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        if not selected_methods:
            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            for i in range(len(self.methods)):
                self.methods_listbox.selection_set(i)
            selected_methods = self.methods
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                               f"–ú–µ—Ç–æ–¥—ã –Ω–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã.\n\n"
                               f"–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –í–°–ï {len(self.methods)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤.")

        if mode == "auto":
            self.run_auto_mode(selected_methods)
        elif mode == "compare":
            self.run_compare_mode(selected_methods)
        elif mode == "full_compare":
            self.run_full_comparison_mode(selected_methods)
    
    def run_auto_mode(self, selected_methods):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –º–µ—Ç–æ–¥–∞ –∏–∑ –í–´–ë–†–ê–ù–ù–´–•

        –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ò–î–ï–ù–¢–ò–ß–ù–ê —Ä–µ–∂–∏–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ú–∞–∫—Å–∏–º—É–º 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ú–∞–∫—Å–∏–º—É–º 90-99% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
        """
        try:
            askupo_df = self.read_data_file(self.askupo_file)
            eatool_df = self.read_data_file(self.eatool_file)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö columns[0]
            askupo_cols = self.selected_askupo_cols
            eatool_cols = self.selected_eatool_cols

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            sample_size = min(200, len(askupo_df))
            # RapidFuzz –±—ã—Å—Ç—Ä—ã–µ (~2 —Å–µ–∫ –Ω–∞ –º–µ—Ç–æ–¥), –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ–¥–ª–µ–Ω–Ω–µ–µ (~15-20 —Å–µ–∫ –Ω–∞ –º–µ—Ç–æ–¥)
            rapidfuzz_count = sum(1 for m in selected_methods if m.use_process)
            other_count = len(selected_methods) - rapidfuzz_count
            estimated_time = (rapidfuzz_count * 2 + other_count * 20) / 60

            info_msg = (f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ:\n"
                       f"   –ê–°–ö–£–ü–û: {len(askupo_df)} –∑–∞–ø–∏—Å–µ–π\n"
                       f"   EA Tool: {len(eatool_df)} –∑–∞–ø–∏—Å–µ–π\n\n"
                       f"üîç –ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(selected_methods)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤\n"
                       f"   ‚Ä¢ RapidFuzz –º–µ—Ç–æ–¥–æ–≤: {rapidfuzz_count} (–±—ã—Å—Ç—Ä—ã–µ)\n"
                       f"   ‚Ä¢ –î—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤: {other_count} (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)\n"
                       f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time:.0f}-{estimated_time*1.5:.0f} –º–∏–Ω—É—Ç")

            if not messagebox.askokcancel("–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É?", info_msg):
                return

            sample_askupo = askupo_df.head(sample_size)

            best_method = None
            best_score = (-1, -1, -1)  # –ö–æ—Ä—Ç–µ–∂ –¥–ª—è –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

            progress_win = tk.Toplevel(self.root)
            progress_win.title("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
            progress_win.geometry("500x200")
            progress_win.transient(self.root)
            progress_win.grab_set()

            tk.Label(progress_win, text="üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ sample –¥–∞–Ω–Ω—ã—Ö",
                    font=("Arial", 12, "bold")).pack(pady=10)

            progress_label = tk.Label(progress_win, text="", font=("Arial", 10))
            progress_label.pack(pady=5)

            progress_bar = ttk.Progressbar(progress_win, length=400, mode='determinate')
            progress_bar.pack(pady=10)
            progress_bar['maximum'] = len(selected_methods)

            time_label = tk.Label(progress_win, text="", font=("Arial", 9), fg="gray")
            time_label.pack(pady=5)

            start_time = time.time()

            for i, method in enumerate(selected_methods):
                elapsed = time.time() - start_time
                progress_label.config(text=f"–ú–µ—Ç–æ–¥ {i+1}/{len(selected_methods)}: {method.name}")
                time_label.config(text=f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {int(elapsed)}—Å")
                progress_bar['value'] = i
                self.root.update()

                score = self.evaluate_method_fast(method, sample_askupo, eatool_df,
                                                  askupo_cols, eatool_cols)

                if score > best_score:
                    best_score = score
                    best_method = method

            progress_win.destroy()

            messagebox.showinfo("‚úÖ –õ—É—á—à–∏–π –º–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω!",
                              f"üèÜ –í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥: {best_method.name}\n\n"
                              f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ sample –¥–∞–Ω–Ω—ã—Ö:\n"
                              f"   ‚Ä¢ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {best_score[0]}\n"
                              f"   ‚Ä¢ 90-99% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {best_score[1]}\n"
                              f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {best_score[2]:.1f}%\n\n"
                              f"‚è±Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º –∑–∞–π–º–µ—Ç ~2-3 –º–∏–Ω—É—Ç—ã")

            self.apply_method_optimized(best_method, askupo_df, eatool_df,
                                       askupo_cols, eatool_cols)

        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{str(e)}\n\n"
                               f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                               f"‚Ä¢ –§–∞–π–ª—ã Excel –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n"
                               f"‚Ä¢ –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ü–û\n"
                               f"‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
    
    def run_compare_mode(self, selected_methods):
        """–†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –í–´–ë–†–ê–ù–ù–´–• –º–µ—Ç–æ–¥–æ–≤

        –õ–æ–≥–∏–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ò–î–ï–ù–¢–ò–ß–ù–ê –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Ä–µ–∂–∏–º—É:
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ú–∞–∫—Å–∏–º—É–º 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ú–∞–∫—Å–∏–º—É–º 90-99% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
        """
        try:
            askupo_df = self.read_data_file(self.askupo_file)
            eatool_df = self.read_data_file(self.eatool_file)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö columns[0]
            askupo_cols = self.selected_askupo_cols
            eatool_cols = self.selected_eatool_cols

            sample_size = min(200, len(askupo_df))
            sample_askupo = askupo_df.head(sample_size)

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            rapidfuzz_count = sum(1 for m in selected_methods if m.use_process)
            other_count = len(selected_methods) - rapidfuzz_count
            estimated_time = (rapidfuzz_count * 3 + other_count * 30) / 60

            info_msg = (f"üìä –ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(selected_methods)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤\n"
                       f"   ‚Ä¢ RapidFuzz –º–µ—Ç–æ–¥–æ–≤: {rapidfuzz_count} (–±—ã—Å—Ç—Ä—ã–µ)\n"
                       f"   ‚Ä¢ –î—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤: {other_count} (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)\n"
                       f"üì¶ Sample: {sample_size} –∑–∞–ø–∏—Å–µ–π\n"
                       f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time:.0f}-{estimated_time*1.5:.0f} –º–∏–Ω—É—Ç")

            if not messagebox.askokcancel("–ù–∞—á–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ?", info_msg):
                return

            progress_win = tk.Toplevel(self.root)
            progress_win.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
            progress_win.geometry("500x200")
            progress_win.transient(self.root)
            progress_win.grab_set()

            tk.Label(progress_win, text="üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤",
                    font=("Arial", 12, "bold")).pack(pady=10)

            progress_label = tk.Label(progress_win, text="", font=("Arial", 10))
            progress_label.pack(pady=5)

            progress_bar = ttk.Progressbar(progress_win, length=400, mode='determinate')
            progress_bar.pack(pady=10)
            progress_bar['maximum'] = len(selected_methods)

            comparison_results = []

            for i, method in enumerate(selected_methods):
                progress_label.config(text=f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {i+1}/{len(selected_methods)}: {method.name}")
                progress_bar['value'] = i
                self.root.update()

                start_time = time.time()
                # test_method_optimized –∏—Å–ø–æ–ª—å–∑—É–µ—Ç self.selected_*_cols
                results = self.test_method_optimized(method, sample_askupo, eatool_df,
                                                     None, None)
                elapsed = time.time() - start_time

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats_dict = self.engine.calculate_statistics(results)

                stats = {
                    'method': method.name,
                    'library': method.library,
                    'avg_score': results['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'].mean(),
                    'perfect': stats_dict['perfect'],      # –¢–æ–ª—å–∫–æ 100%
                    'high': stats_dict['high'],            # –¢–æ–ª—å–∫–æ 90-99%
                    'medium': stats_dict['medium'],        # –¢–æ–ª—å–∫–æ 70-89%
                    'time': elapsed
                }

                comparison_results.append(stats)

            progress_win.destroy()

            # –õ–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–∏–¥–µ–Ω—Ç–∏—á–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Ä–µ–∂–∏–º—É)
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π > 90-99% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π > —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
            comparison_results.sort(key=lambda x: (x['perfect'], x['high'], x['avg_score']),
                                   reverse=True)

            self.display_comparison(comparison_results)
            self.notebook.select(1)

            messagebox.showinfo("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                              f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(selected_methods)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤\n\n"
                              f"üèÜ –õ—É—á—à–∏–π: {comparison_results[0]['method']}\n"
                              f"üìä 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {comparison_results[0]['perfect']}")

        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{str(e)}")

    def _run_comparison_on_full_data(self, methods: List, window_title: str,
                                     header_text: str, export_filename: str) -> None:
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö

        Args:
            methods: –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            window_title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            header_text: –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –æ–∫–Ω–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            export_filename: –ò–º—è —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        askupo_df = self.read_data_file(self.askupo_file)
        eatool_df = self.read_data_file(self.eatool_file)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö columns[0]
        askupo_cols = self.selected_askupo_cols
        eatool_cols = self.selected_eatool_cols

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_win = tk.Toplevel(self.root)
        progress_win.title(window_title)
        progress_win.geometry("600x250")
        progress_win.transient(self.root)
        progress_win.grab_set()

        tk.Label(progress_win, text=header_text,
                font=("Arial", 12, "bold")).pack(pady=10)

        method_label = tk.Label(progress_win, text="", font=("Arial", 10))
        method_label.pack(pady=5)

        progress_label = tk.Label(progress_win, text="", font=("Arial", 9))
        progress_label.pack(pady=5)

        progress_bar = ttk.Progressbar(progress_win, length=500, mode='determinate')
        progress_bar.pack(pady=10)
        progress_bar['maximum'] = len(methods) * len(askupo_df)

        time_label = tk.Label(progress_win, text="", font=("Arial", 9), fg="gray")
        time_label.pack(pady=5)

        start_time = time.time()
        all_methods_results = {}  # –°–ª–æ–≤–∞—Ä—å: –∏–º—è –º–µ—Ç–æ–¥–∞ -> DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        comparison_stats = []

        total_processed = 0

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
        for method_idx, method in enumerate(methods):
            method_start_time = time.time()
            method_label.config(text=f"–ú–µ—Ç–æ–¥ {method_idx+1}/{len(methods)}: {method.name}")
            self.root.update()

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –∫–æ –í–°–ï–ú –¥–∞–Ω–Ω—ã–º
            # test_method_optimized –∏—Å–ø–æ–ª—å–∑—É–µ—Ç self.selected_*_cols
            results_df = self.test_method_optimized(method, askupo_df, eatool_df,
                                                   None, None)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            all_methods_results[method.name] = results_df

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_dict = self.engine.calculate_statistics(results_df)

            comparison_stats.append({
                'method': method.name,
                'library': method.library,
                'total': stats_dict['total'],
                'perfect': stats_dict['perfect'],
                'high': stats_dict['high'],
                'medium': stats_dict['medium'],
                'low': stats_dict['low'],
                'very_low': stats_dict['very_low'],
                'none': stats_dict['none'],
                'avg_score': results_df['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'].mean(),
                'time': time.time() - method_start_time
            })

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            total_processed += len(askupo_df)
            progress_bar['value'] = total_processed
            elapsed = time.time() - start_time
            remaining = (elapsed / total_processed) * (len(methods) * len(askupo_df) - total_processed)

            progress_label.config(text=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {method_idx+1}/{len(methods)}")
            time_label.config(text=f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {int(elapsed)}—Å ({elapsed/60:.1f} –º–∏–Ω) | –û—Å—Ç–∞–ª–æ—Å—å: ~{int(remaining)}—Å ({remaining/60:.1f} –º–∏–Ω)")
            self.root.update()

        progress_win.destroy()

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        comparison_stats.sort(key=lambda x: (x['perfect'], x['high'], x['avg_score']), reverse=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.full_comparison_results = {
            'methods_data': all_methods_results,
            'comparison_stats': comparison_stats
        }

        elapsed_total = time.time() - start_time

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.export_full_comparison_to_excel(default_filename=export_filename)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messagebox.showinfo("‚úÖ –ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                          f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {int(elapsed_total)}—Å ({elapsed_total/60:.1f} –º–∏–Ω)\n\n"
                          f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(methods)} –º–µ—Ç–æ–¥–æ–≤\n"
                          f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(askupo_df)} –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–º –º–µ—Ç–æ–¥–µ\n\n"
                          f"üèÜ –õ—É—á—à–∏–π –º–µ—Ç–æ–¥: {comparison_stats[0]['method']}\n"
                          f"   ‚Ä¢ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {comparison_stats[0]['perfect']}\n"
                          f"   ‚Ä¢ 90-99%: {comparison_stats[0]['high']}\n"
                          f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {comparison_stats[0]['avg_score']:.1f}%\n\n"
                          f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel")

    def run_full_comparison_mode(self, selected_methods):
        """–ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - –ø—Ä–∏–º–µ–Ω—è–µ—Ç –í–´–ë–†–ê–ù–ù–´–ï –º–µ—Ç–æ–¥—ã –∫–æ –í–°–ï–ú –¥–∞–Ω–Ω—ã–º"""
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            askupo_df = self.read_data_file(self.askupo_file)
            eatool_df = self.read_data_file(self.eatool_file)

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö
            rapidfuzz_count = sum(1 for m in selected_methods if m.use_process)
            other_count = len(selected_methods) - rapidfuzz_count
            estimated_time = (rapidfuzz_count * 3 + other_count * 4) / 60

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            info_msg = (f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!\n\n"
                       f"üìÇ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n"
                       f"   –ê–°–ö–£–ü–û: {len(askupo_df)} –∑–∞–ø–∏—Å–µ–π\n"
                       f"   EA Tool: {len(eatool_df)} –∑–∞–ø–∏—Å–µ–π\n"
                       f"   –ú–µ—Ç–æ–¥–æ–≤: {len(selected_methods)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö\n\n"
                       f"üî¨ –ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫–æ –í–°–ï–ú –∑–∞–ø–∏—Å—è–º\n"
                       f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time:.0f}-{estimated_time*1.5:.0f} –º–∏–Ω—É—Ç\n\n"
                       f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: Excel —Ñ–∞–π–ª —Å –ª–∏—Å—Ç–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ + —Å–≤–æ–¥–∫–∞")

            if not messagebox.askokcancel("‚ö†Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ?", info_msg):
                return

            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._run_comparison_on_full_data(
                methods=selected_methods,
                window_title="–ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...",
                header_text="üî¨ –ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö",
                export_filename="–ü–æ–ª–Ω–æ–µ_—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö_–º–µ—Ç–æ–¥–æ–≤.xlsx"
            )

        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{str(e)}")

    # –ú–µ—Ç–æ–¥—ã run_manual_mode –∏ run_multi_manual_mode –£–î–ê–õ–ï–ù–´
    # –í—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ø–µ—Ä—å –≤ run_full_comparison_mode

    def evaluate_method_fast(self, method: MatchingMethod, sample_askupo: pd.DataFrame,
                            eatool_df: pd.DataFrame, askupo_cols: list, eatool_cols: list) -> tuple:
        """–ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ—Ç–æ–¥–∞

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –¥–ª—è –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:
        (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 100%, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 90-99%, —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç)
        –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å —Ä–µ–∂–∏–º–æ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤.

        Args:
            askupo_cols: –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            eatool_cols: –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        """
        # test_method_optimized —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ —á–µ—Ä–µ–∑ self.selected_*_cols
        results = self.test_method_optimized(method, sample_askupo, eatool_df,
                                            None, None)

        stats = self.engine.calculate_statistics(results)

        # –õ–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 100% > 90-99% > —Å—Ä–µ–¥–Ω–∏–π)
        # –ò–¥–µ–Ω—Ç–∏—á–Ω–∞ –ª–æ–≥–∏–∫–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ —Ä–µ–∂–∏–º–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        score = (stats['perfect'], stats['high'], results['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'].mean())

        return score
    
    def test_method_optimized(self, method: MatchingMethod, askupo_df: pd.DataFrame,
                             eatool_df: pd.DataFrame, askupo_col: str = None, eatool_col: str = None) -> pd.DataFrame:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞

        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
        - –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        - –†–µ–∂–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ (2 —Å—Ç–æ–ª–±—Ü–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
        - –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ GUI –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        askupo_cols = self.selected_askupo_cols if self.selected_askupo_cols else [askupo_col if askupo_col else askupo_df.columns[0]]
        eatool_cols = self.selected_eatool_cols if self.selected_eatool_cols else [eatool_col if eatool_col else eatool_df.columns[0]]

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        eatool_combined_names = []
        eatool_original_values = []

        for _, row in eatool_df.iterrows():
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            combined = self.engine.combine_columns(row, eatool_cols)
            eatool_combined_names.append(combined)
            eatool_original_values.append(combined)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        eatool_normalized = [self.normalize_string(name) for name in eatool_combined_names]
        choice_dict = {norm: orig for norm, orig in zip(eatool_normalized, eatool_original_values)}

        # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        eatool_row_dict = {}
        for idx, row in eatool_df.iterrows():
            combined = self.engine.combine_columns(row, eatool_cols)
            eatool_row_dict[combined] = row

        results = []

        for _, row in askupo_df.iterrows():
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1 (–∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è)
            askupo_combined = self.engine.combine_columns(row, askupo_cols)
            askupo_normalized = self.engine.normalize_string(askupo_combined)

            # –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            best_match, best_score = method.find_best_match(
                askupo_normalized,
                eatool_normalized,
                choice_dict
            )

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            if best_score < AppConstants.THRESHOLD_REJECT:
                best_match = ""
                best_score = 0

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ v2.1 - —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            result_row = self._create_result_row_dict(
                askupo_combined=askupo_combined,
                best_match=best_match,
                best_score=best_score,
                method_name=method.name,
                askupo_row=row,
                askupo_df=askupo_df,
                eatool_row_dict=eatool_row_dict,
                eatool_df=eatool_df
            )

            results.append(result_row)

        return pd.DataFrame(results)
    
    def apply_method_optimized(self, method: MatchingMethod, askupo_df: pd.DataFrame,
                               eatool_df: pd.DataFrame, askupo_cols: list, eatool_cols: list):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤

        Args:
            askupo_cols: –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            eatool_cols: –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        """

        progress_win = tk.Toplevel(self.root)
        progress_win.title(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞...")
        progress_win.geometry("600x250")
        progress_win.transient(self.root)
        progress_win.grab_set()

        tk.Label(progress_win, text=f"‚öôÔ∏è {method.name}",
                font=("Arial", 12, "bold")).pack(pady=10)

        status_label = tk.Label(progress_win, text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
                               font=("Arial", 10))
        status_label.pack(pady=5)

        progress_label = tk.Label(progress_win, text="", font=("Arial", 9))
        progress_label.pack(pady=5)

        progress_bar = ttk.Progressbar(progress_win, length=500, mode='determinate')
        progress_bar.pack(pady=10)

        time_label = tk.Label(progress_win, text="", font=("Arial", 9), fg="gray")
        time_label.pack(pady=5)

        self.root.update()

        start_time = time.time()

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 2 —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Å—Ç–æ–ª–±—Ü–æ–≤
        eatool_combined_names = []
        for _, row in eatool_df.iterrows():
            combined = self.engine.combine_columns(row, eatool_cols)
            eatool_combined_names.append(combined)

        eatool_normalized = [self.engine.normalize_string(name) for name in eatool_combined_names]
        choice_dict = {norm: orig for norm, orig in zip(eatool_normalized, eatool_combined_names)}

        # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        eatool_row_dict = {}
        for idx, row in eatool_df.iterrows():
            combined = self.engine.combine_columns(row, eatool_cols)
            eatool_row_dict[combined] = row

        status_label.config(text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π...")

        results = []
        total = len(askupo_df)
        progress_bar['maximum'] = total

        for idx, row in askupo_df.iterrows():
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 1
            askupo_combined = self.engine.combine_columns(row, askupo_cols)
            askupo_normalized = self.engine.normalize_string(askupo_combined)

            best_match, best_score = method.find_best_match(
                askupo_normalized,
                eatool_normalized,
                choice_dict
            )

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            if best_score < AppConstants.THRESHOLD_REJECT:
                best_match = ""
                best_score = 0

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ v2.1 - —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            result_row = self._create_result_row_dict(
                askupo_combined=askupo_combined,
                best_match=best_match,
                best_score=best_score,
                method_name=method.name,
                askupo_row=row,
                askupo_df=askupo_df,
                eatool_row_dict=eatool_row_dict,
                eatool_df=eatool_df
            )

            results.append(result_row)
            
            if idx % 10 == 0:
                elapsed = time.time() - start_time
                remaining = (elapsed / (idx + 1)) * (total - idx - 1)
                
                progress_bar['value'] = idx
                progress_label.config(text=f"{idx}/{total} –∑–∞–ø–∏—Å–µ–π ({int(idx/total*100)}%)")
                time_label.config(text=f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {int(elapsed)}—Å | –û—Å—Ç–∞–ª–æ—Å—å: ~{int(remaining)}—Å")
                self.root.update()
        
        progress_bar['value'] = total
        self.root.update()
        
        self.results = pd.DataFrame(results).sort_values('–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è', ascending=False)
        
        progress_win.destroy()
        
        self.display_results(method)
        self.notebook.select(2)
        
        elapsed_total = time.time() - start_time
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = self.engine.calculate_statistics(self.results)
        
        stats_msg = (f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"‚è±Ô∏è –í—Ä–µ–º—è: {int(elapsed_total)}—Å ({elapsed_total/60:.1f} –º–∏–Ω)\n"
                    f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total']} –∑–∞–ø–∏—Å–µ–π\n\n"
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º):\n"
                    f"  ‚Ä¢ 100% (—Ç–æ—á–Ω–æ–µ):     {stats['perfect']} ({stats['perfect']/stats['total']*100:.1f}%)\n"
                    f"  ‚Ä¢ 90-99% (–≤—ã—Å–æ–∫–æ–µ):  {stats['high']} ({stats['high']/stats['total']*100:.1f}%)\n"
                    f"  ‚Ä¢ 70-89% (—Å—Ä–µ–¥–Ω–µ–µ):  {stats['medium']} ({stats['medium']/stats['total']*100:.1f}%)\n"
                    f"  ‚Ä¢ 50-69% (–Ω–∏–∑–∫–æ–µ):   {stats['low']} ({stats['low']/stats['total']*100:.1f}%)\n"
                    f"  ‚Ä¢ 1-49% (–æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ): {stats['very_low']} ({stats['very_low']/stats['total']*100:.1f}%)\n"
                    f"  ‚Ä¢ 0% (–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è): {stats['none']} ({stats['none']/stats['total']*100:.1f}%)\n\n"
                    f"‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞: {stats['check_sum']} = {stats['total']} {'‚úÖ' if stats['check_sum'] == stats['total'] else '‚ùå'}")
        
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ!", stats_msg)
    
    def display_comparison(self, comparison_results: List[Dict]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤"""
        self.methods_comparison = comparison_results
        
        for item in self.comparison_tree.get_children():
            self.comparison_tree.delete(item)
        
        for rank, stats in enumerate(comparison_results, 1):
            medal = "ü•á" if rank == 1 else "ü•à" if rank == 2 else "ü•â" if rank == 3 else f"#{rank}"
            
            values = (
                medal,
                stats['method'],
                stats['library'],
                stats['perfect'],      # –¢–æ–ª—å–∫–æ 100%
                stats['high'],         # –¢–æ–ª—å–∫–æ 90-99%
                f"{stats['avg_score']:.1f}%",
                f"{stats['time']:.1f}—Å"
            )
            
            tag = 'best' if rank == 1 else 'good' if rank <= 3 else ''
            self.comparison_tree.insert("", tk.END, values=values, tags=(tag,))
        
        self.comparison_tree.tag_configure('best', background='#D1FAE5')
        self.comparison_tree.tag_configure('good', background='#DBEAFE')
    
    def display_results(self, method: MatchingMethod):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        for widget in self.result_info_frame.winfo_children():
            widget.destroy()
        
        info_text = f"üî¨ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥: {method.name} (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {method.library})"
        tk.Label(self.result_info_frame, text=info_text, 
                font=("Arial", 11, "bold"), fg="#7C3AED").pack(anchor=tk.W)
        
        for widget in self.result_stats_frame.winfo_children():
            widget.destroy()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = self.engine.calculate_statistics(self.results)
        
        stats_display = {
            '–í—Å–µ–≥–æ': stats['total'],
            '100%': stats['perfect'],
            '90-99%': stats['high'],
            '70-89%': stats['medium'],
            '50-69%': stats['low'],
            '1-49%': stats['very_low'],
            '0%': stats['none']
        }
        
        colors = ['#6B7280', '#10B981', '#3B82F6', '#F59E0B', '#F97316', '#FF6B6B', '#EF4444']
        
        for i, (label, value) in enumerate(stats_display.items()):
            frame = tk.Frame(self.result_stats_frame, bg=colors[i], padx=8, pady=5)
            frame.pack(side=tk.LEFT, padx=3)
            
            tk.Label(frame, text=str(value), font=("Arial", 15, "bold"), 
                    fg="white", bg=colors[i]).pack()
            tk.Label(frame, text=label, font=("Arial", 8), 
                    fg="white", bg=colors[i]).pack()
        
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        for idx, row in self.results.head(50).iterrows():
            # –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∏ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü
            col_names = self.results.columns.tolist()
            source1_col = [c for c in col_names if c.startswith('–ò—Å—Ç–æ—á–Ω–∏–∫ 1:')][0]
            source2_col = [c for c in col_names if c.startswith('–ò—Å—Ç–æ—á–Ω–∏–∫ 2:')][0]

            source1 = str(row[source1_col])
            source2 = str(row[source2_col]) if row[source2_col] else ""

            values = (
                idx + 1,
                source1[:50] + "..." if len(source1) > 50 else source1,
                source2[:50] + "..." if source2 and len(source2) > 50 else source2 if source2 else "‚ùå –ù–ï–¢",
                f"{row['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è']}%"
            )

            percent = row['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è']
            tag = 'perfect' if percent == 100 else 'high' if percent >= 90 else 'medium' if percent >= 70 else 'low' if percent >= 50 else 'very_low' if percent > 0 else 'none'

            self.results_tree.insert("", tk.END, values=values, tags=(tag,))
        
        self.results_tree.tag_configure('perfect', background='#D1FAE5')
        self.results_tree.tag_configure('high', background='#DBEAFE')
        self.results_tree.tag_configure('medium', background='#FEF3C7')
        self.results_tree.tag_configure('low', background='#FED7AA')
        self.results_tree.tag_configure('very_low', background='#FFE4E1')
        self.results_tree.tag_configure('none', background='#FEE2E2')
    
    def export_comparison(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤"""
        self.exporter.export_comparison(self.methods_comparison)
    
    def export_full(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        if self.results is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º results –≤ exporter –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º
        self.exporter.results = self.results
        self.exporter.export_results(self.results, "–ü–æ–ª–Ω—ã–π_–æ—Ç—á–µ—Ç_—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.xlsx", include_stats=True)

    def export_perfect(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"""
        if self.results is None:
            return
        data = self.results[self.results[AppConstants.COL_PERCENT] == 100]
        self.exporter.results = self.results
        self.exporter.export_results(data, "–¢–æ—á–Ω—ã–µ_—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è_100%.xlsx")

    def export_problems(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (<90%)"""
        if self.results is None:
            return
        data = self.results[self.results[AppConstants.COL_PERCENT] < 90]
        self.exporter.results = self.results
        self.exporter.export_results(data, "–¢—Ä–µ–±—É—é—Ç_–ø—Ä–æ–≤–µ—Ä–∫–∏_–º–µ–Ω–µ–µ_90%.xlsx")

    def export_no_match(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (0%)"""
        if self.results is None:
            return
        data = self.results[self.results[AppConstants.COL_PERCENT] == 0]
        self.exporter.results = self.results
        self.exporter.export_results(data, "–ë–µ–∑_—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π_0%.xlsx")
    
    def export_excel(self, data: pd.DataFrame, filename: str, include_stats: bool = False):
        """
        –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel (LEGACY - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å self.exporter.export_results() –Ω–∞–ø—Ä—è–º—É—é
        """
        self.exporter.results = self.results
        return self.exporter.export_results(data, filename, include_stats)

    def export_full_comparison_to_excel(self, default_filename=None):
        """
        –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ Excel

        Args:
            default_filename: –ò–º—è —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        filename = default_filename or "–ü–æ–ª–Ω–æ–µ_—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_–≤—Å–µ—Ö_–º–µ—Ç–æ–¥–æ–≤.xlsx"
        return self.exporter.export_full_comparison(self.full_comparison_results, filename)


def main():
    root = tk.Tk()
    app = ExpertMatcher(root)
    root.mainloop()


if __name__ == "__main__":
    main()