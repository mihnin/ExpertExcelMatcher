# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 19-–≥–æ –º–µ—Ç–æ–¥–∞ BGE-M3
"""

import sys
import io

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

import numpy as np

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å BGE
try:
    from FlagEmbedding import BGEM3FlagModel
    print("‚úÖ FlagEmbedding –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FlagEmbedding: {e}")
    sys.exit(1)

print("\n" + "="*80)
print("–¢–ï–°–¢ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ BGE-M3")
print("="*80)

try:
    print("üß† –ó–∞–≥—Ä—É–∑–∫–∞ BGE-M3 –º–æ–¥–µ–ª–∏...")
    print("   –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ~2 GB)")

    model = BGEM3FlagModel(
        'BAAI/bge-m3',
        device='cpu',
        use_fp16=False,
        normalize_embeddings=True
    )
    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

print("\n" + "="*80)
print("–¢–ï–°–¢ 2: –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –≤–µ–∫—Ç–æ—Ä—ã")
print("="*80)

test_strings = [
    ("Microsoft Office", "MS Office"),
    ("1C Enterprise", "1–° –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ"),
    ("Adobe Photoshop", "Photoshop CC"),
    ("Oracle Database", "Oracle DB"),
    ("Google Chrome", "Chrome Browser"),
]

for str1, str2 in test_strings:
    print(f"\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: '{str1}' vs '{str2}'")

    try:
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        vec1 = model.encode(str1.lower())['dense_vecs']
        vec2 = model.encode(str2.lower())['dense_vecs']

        print(f"  –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å vec1: {vec1.shape}")
        print(f"  –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å vec2: {vec2.shape}")

        # –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
        similarity = float(np.dot(vec1, vec2))
        similarity_percent = similarity * 100.0

        print(f"  –°—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.6f} ({similarity_percent:.2f}%)")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

print("\n" + "="*80)
print("–¢–ï–°–¢ 3: –†–∞–±–æ—Ç–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏")
print("="*80)

# –≠–º—É–ª–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def normalize_string(s):
    """–ë–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è"""
    if not s:
        return ""
    return str(s).lower().strip()

normalized_pairs = [
    (normalize_string("–û–û–û Microsoft Office 2021 x64"),
     normalize_string("Microsoft Office Professional")),
    (normalize_string("Adobe Photoshop CC 2019"),
     normalize_string("Photoshop")),
]

for str1, str2 in normalized_pairs:
    print(f"\n–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ: '{str1}' vs '{str2}'")

    try:
        vec1 = model.encode(str1)['dense_vecs']
        vec2 = model.encode(str2)['dense_vecs']

        similarity = float(np.dot(vec1, vec2))
        similarity_percent = similarity * 100.0

        print(f"  –°—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.6f} ({similarity_percent:.2f}%)")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

print("\n" + "="*80)
print("–¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ encode()")
print("="*80)

test_str = "Microsoft Office"
result = model.encode(test_str)

print(f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
print(f"–ö–ª—é—á–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {result.keys() if isinstance(result, dict) else '–Ω–µ —Å–ª–æ–≤–∞—Ä—å!'}")

if isinstance(result, dict) and 'dense_vecs' in result:
    dense = result['dense_vecs']
    print(f"–¢–∏–ø dense_vecs: {type(dense)}")
    print(f"Shape dense_vecs: {dense.shape if hasattr(dense, 'shape') else '–Ω–µ—Ç shape'}")
    print(f"–ü–µ—Ä–≤—ã–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {dense[:5]}")
    print("‚úÖ –§–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!")
else:
    print("‚ùå –§–æ—Ä–º–∞—Ç –ù–ï –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! –û–∂–∏–¥–∞–ª—Å—è dict —Å –∫–ª—é—á–æ–º 'dense_vecs'")

print("\n" + "="*80)
print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
print("="*80)
