"""
Справочные тексты для Expert Excel Matcher

Этот модуль содержит все справочные тексты и описания,
отображаемые в пользовательском интерфейсе приложения.
"""


class HelpContent:
    """Класс с справочными текстами приложения"""

    @staticmethod
    def get_app_description(total_methods: int) -> str:
        """Описание возможностей приложения на главной странице"""
        return f"""
🔍 Интеллектуальное сопоставление данных из двух источников

✨ ОСНОВНЫЕ ВОЗМОЖНОСТИ:

  • Поддержка Excel (.xlsx, .xls) и CSV файлов
  • Сравнение по 1 или сразу 2 столбцам одновременно (конкатенация)
  • {total_methods} методов сопоставления: от простого ВПР до сложных fuzzy-алгоритмов
  • Расширенная нормализация текста: юр.формы, версии, транслит, стоп-слова
  • Гибкий выбор методов: работа только с выбранными или со всеми сразу
  • Выбор любых столбцов из каждого источника для сравнения

🎯 РЕЖИМЫ РАБОТЫ:

  1. Автоматический - находит лучший метод из выбранных
  2. Сравнение - показывает статистику по выбранным методам
  3. Полное сравнение - применяет выбранные методы ко всем данным

  📚 Подробное описание всех режимов и методов — в разделе "Справка"

⚡ РЕЗУЛЬТАТ: Точное сопоставление данных даже при неполном совпадении названий!
"""

    @staticmethod
    def get_file_requirements() -> str:
        """Требования к входным файлам"""
        return """
✅ ОБЩИЕ ТРЕБОВАНИЯ:
   • Формат файлов: .xlsx, .xls или .csv (v3.0!)
   • Кодировка CSV: автоматическое определение (UTF-8-BOM, UTF-8, CP1251, Windows-1251, Latin1)
   • Разделитель CSV: запятая (стандарт)
   • Название файла: ЛЮБОЕ (без ограничений)

✅ СТРУКТУРА ФАЙЛОВ (v3.0 - гибкий выбор столбцов):
   • Можно выбрать ЛЮБОЙ столбец(цы) из каждого источника для сравнения
   • Поддержка сравнения по 1 или 2 столбцам одновременно
   • Чекбоксы для наследования остальных столбцов в результат
   • По умолчанию: оба источника наследуют все столбцы

📋 ПРИМЕРЫ ДОПУСТИМЫХ СТРУКТУР:

   Файл 1 (АСКУПО):
   ┌────────────────────────────┬──────────┬─────────┐
   │ Название ПО                │ Версия   │ Vendor  │
   ├────────────────────────────┼──────────┼─────────┤
   │ Microsoft Office 365       │ 2021     │ MS      │
   │ Adobe Acrobat Reader DC    │ 22.0     │ Adobe   │
   └────────────────────────────┴──────────┴─────────┘

   Файл 2 (EA Tool):
   ┌────────────────────────────┬──────────┐
   │ Product Name               │ Category │
   ├────────────────────────────┼──────────┤
   │ MS Office 365              │ Office   │
   │ Acrobat Reader             │ PDF      │
   └────────────────────────────┴──────────┘

⚠️ ВАЖНО:
   • Выбранные столбцы могут содержать ЛЮБЫЕ данные (текст, числа, даты)
   • Все данные автоматически преобразуются в текст для сравнения
   • Пустые строки в выбранных столбцах будут пропущены
   • Регистр букв не важен (всё приводится к нижнему регистру)
   • При выборе 2 столбцов их значения объединяются через ПРОБЕЛ в единую строку
   • Сравнение идет по объединенной строке как единому целому
"""

    @staticmethod
    def get_modes_description(total_methods: int) -> str:
        """Описание режимов работы приложения"""
        return f"""
1️⃣ АВТОМАТИЧЕСКИЙ РЕЖИМ (рекомендуется):
   • Тестирует ВЫБРАННЫЕ методы на образце данных (~200 записей)
   • Автоматически выбирает лучший метод из выбранных
   • Применяет его ко всем данным и создает результирующий Excel
   • Выбор методов: удерживайте Ctrl для множественного выбора
   • Если методы не выбраны - используются ВСЕ {total_methods} доступных
   • Время: зависит от количества выбранных методов

2️⃣ РЕЖИМ СРАВНЕНИЯ (для анализа):
   • Тестирует ВЫБРАННЫЕ методы на выборке (не более первых 200 записей)
   • Показывает статистику по каждому выбранному методу
   • Выбирает лучший метод по критериям (100% > 90-99% > средний балл)
   • Позволяет увидеть и сравнить результаты перед применением
   • Если методы не выбраны - используются ВСЕ {total_methods} доступных
   • Время: зависит от количества выбранных методов

3️⃣ ПОЛНОЕ СРАВНЕНИЕ (может быть долгая операция):
   • Выбор одного или нескольких методов для создания результирующего эксель
   • Применяет КАЖДЫЙ выбранный метод ко ВСЕМ данным
   • Создаёт Excel файл с листом для каждого метода + сводная таблица
   • Выбор методов: удерживайте Ctrl для множественного выбора
   • Если методы не выбраны - используются ВСЕ {total_methods} доступных
   • Время: зависит от количества выбранных методов и объёма данных

💡 СОВЕТ: Выбирайте только нужные методы для ускорения работы!
"""

    @staticmethod
    def get_algorithm_description() -> str:
        """Алгоритм автоматического выбора метода"""
        return """
📊 КАК РАБОТАЕТ АВТОМАТИЧЕСКИЙ ВЫБОР:

Автоматический режим и режим Сравнения используют ОДИНАКОВЫЙ алгоритм для
определения лучшего метода. Это гарантирует, что автоматический режим всегда
выбирает тот же метод, который будет показан как #1 в режиме Сравнения.

🔢 ЛЕКСИКОГРАФИЧЕСКАЯ СОРТИРОВКА (Lexicographic Sorting):

Каждый метод получает 3 показателя после тестирования на образце данных:
   1. Количество совпадений 100% (идеальные совпадения)
   2. Количество совпадений 90-99% (высокое качество)
   3. Средний процент совпадения по всем записям

Методы сравниваются в следующем порядке приоритетов:

   ┌────────────────────────────────────────────────────────────┐
   │ ПРИОРИТЕТ 1: Максимум идеальных совпадений (100%)          │
   │ Чем больше точных совпадений - тем лучше метод             │
   └────────────────────────────────────────────────────────────┘
                            ↓ если равны
   ┌────────────────────────────────────────────────────────────┐
   │ ПРИОРИТЕТ 2: Максимум высоких совпадений (90-99%)          │
   │ Чем больше почти точных совпадений - тем лучше метод       │
   └────────────────────────────────────────────────────────────┘
                            ↓ если равны
   ┌────────────────────────────────────────────────────────────┐
   │ ПРИОРИТЕТ 3: Максимальный средний процент совпадения       │
   │ Общее качество сопоставления всех записей                  │
   └────────────────────────────────────────────────────────────┘

📈 ПРИМЕР СРАВНЕНИЯ:

   Метод A: (50 × 100%, 30 × 90-99%, avg=85%)
   Метод B: (48 × 100%, 40 × 90-99%, avg=90%)

   ПОБЕДИТЕЛЬ: Метод A
   ПРИЧИНА: 50 > 48 в первом приоритете (100% совпадений)

   Метод C: (50 × 100%, 35 × 90-99%, avg=82%)
   Метод D: (50 × 100%, 35 × 90-99%, avg=87%)

   ПОБЕДИТЕЛЬ: Метод D
   ПРИЧИНА: Равны в приоритетах 1 и 2, но 87% > 82% в приоритете 3

✅ ПОЧЕМУ ТАКОЙ АЛГОРИТМ:

   • Идеальные совпадения важнее всего - их можно использовать сразу
   • Высокие совпадения (90-99%) требуют минимальной проверки
   • Средний процент показывает общее качество, но менее важен
   • Лексикографический порядок гарантирует стабильность выбора
"""

    @staticmethod
    def get_columns_selection() -> str:
        """Выбор столбцов для сравнения"""
        return """
🔹 ВЫБОР СТОЛБЦОВ (v3.0.0 - гибкий выбор):
   • После загрузки каждого файла появляется список ВСЕХ его столбцов
   • Можно выбрать ЛЮБЫЕ 1 или 2 столбца для сравнения (множественный выбор)
   • При выборе 2 столбцов их значения объединяются через ПРОБЕЛ в единую строку
   • Сравнение проходит по объединенной строке как единому целому
   • По умолчанию выбран первый столбец (автоматически после загрузки файла)

🔹 AUTO-MODE CHECKBOX (v3.0.0 - автоматический режим):
   • Чекбокс "☑ Режим сравнения по 2 столбцам одновременно"
   • АВТОМАТИЧЕСКИ включается, если выбрано 2 столбца в ОБОИХ источниках
   • АВТОМАТИЧЕСКИ отключается, если выбран 1 столбец хотя бы в одном источнике
   • Не нужно вручную включать/отключать - система делает это за вас!
   • Показывает текущий режим работы (1-column vs 2-column mode)

🔹 НАСЛЕДОВАНИЕ СТОЛБЦОВ (чекбоксы):
   • "Наследовать остальные столбцы источника 1" - ВКЛ по умолчанию
   • "Наследовать остальные столбцы источника 2" - ВКЛ по умолчанию
   • Наследуемые столбцы получают префикс: "Источник 1: [имя]"
   • Отключите чекбокс, если не нужны дополнительные столбцы

📋 ПРИМЕР:
   Источник 1 имеет столбцы: [Название ПО, Версия, Vendor]
   Источник 2 имеет столбцы: [Product Name, Category]

   Вы выбираете для сравнения:
   • Источник 1: "Vendor" + "Название ПО" (2 столбца)
   • Источник 2: "Category" + "Product Name" (2 столбца)

   ✅ Auto-mode checkbox АВТОМАТИЧЕСКИ включается!

   Сравнение происходит так:
   • Источник 1: "Microsoft" + " " + "Office" = "Microsoft Office"
   • Источник 2: "Productivity" + " " + "MS Office" = "Productivity MS Office"

   В результате будут столбцы:
   • Источник 1: Vendor (показывается в GUI)
   • Источник 1: Название ПО (показывается в GUI)
   • Источник 1: Версия (наследуется, только в Excel)
   • Источник 2: Category (показывается в GUI)
   • Источник 2: Product Name (показывается в GUI)
   • Процент совпадения
   • Метод
   • [DEBUG] Нормализованный Источник 1 (только в Excel, желтый)
   • [DEBUG] Нормализованный Источник 2 (только в Excel, желтый)
"""

    @staticmethod
    def get_export_options() -> str:
        """Опции экспорта результатов"""
        return """
📊 ПОЛНЫЙ ОТЧЁТ:
   • Все результаты сопоставления
   • Отдельный лист со статистикой
   • Цветовая раскраска по качеству совпадения
   • 🐛 DEBUG COLUMNS (v3.0.0): Два желтых столбца показывают нормализованные значения:
      - [DEBUG] Нормализованный Источник 1 - как нормализовался источник 1
      - [DEBUG] Нормализованный Источник 2 - как нормализовался источник 2
      - Помогают понять влияние чекбоксов нормализации на результаты

✅ ТОЧНЫЕ СОВПАДЕНИЯ (100%):
   • Только записи с точным совпадением
   • Готово к импорту без проверки
   • Включает debug columns для проверки

⚠️ ТРЕБУЮТ ПРОВЕРКИ (<90%):
   • Записи с совпадением ниже 90%
   • Рекомендуется ручная проверка
   • Debug columns помогают понять причину низкого совпадения

❌ БЕЗ СОВПАДЕНИЙ (0%):
   • Записи, для которых не найдено совпадений
   • Требуется ручной поиск или добавление
   • Debug columns показывают как данные были нормализованы
"""

    @staticmethod
    def get_libraries_description() -> str:
        """Описание используемых библиотек"""
        return """
🏠 BUILTIN (встроенные методы):
   • Точное совпадение (ВПР) - аналог Excel VLOOKUP
   • Возвращает 100% при точном совпадении, 0% при несовпадении
   • Мгновенная работа, не требует внешних библиотек
   • Полезно для точного поиска без приблизительного сопоставления

🔬 RAPIDFUZZ (быстрая библиотека на C++):
   • Самая быстрая библиотека (в 100 раз быстрее аналогов)
   • Методы: WRatio, Token Set, Token Sort, Partial Ratio и др.
   • Оптимизирована для больших датасетов

📊 TEXTDISTANCE:
   • Научные метрики расстояния
   • Методы: Jaro-Winkler, Jaro, Jaccard, Sorensen-Dice, Cosine
   • Медленнее, но иногда точнее

🔊 JELLYFISH:
   • Фонетическое сравнение (для похоже звучащих слов)
   • Методы: Jaro-Winkler, Jaro
   • Полезно для имён и названий с опечатками
"""

    @staticmethod
    def get_methods_detailed_description() -> str:
        """Подробное описание всех методов сопоставления"""
        return """
═══════════════════════════════════════════════════════════════════
🏠 ВСТРОЕННЫЕ МЕТОДЫ (1 метод) - v3.0
═══════════════════════════════════════════════════════════════════

0️⃣ Точное совпадение (ВПР) 📌
   ОПИСАНИЕ: Аналог функции VLOOKUP в Excel - точное сопоставление
   КАК РАБОТАЕТ: Сравнивает нормализованные строки на полное совпадение
   ПРИМЕР:
      "Microsoft Office" vs "microsoft office" → 100% (игнор регистра)
      "Microsoft Office" vs "MS Office" → 0% (не совпадает)
      "Chrome" vs "Chrome Browser" → 0% (не совпадает)
   КОГДА ИСПОЛЬЗОВАТЬ: Когда нужно ТОЧНОЕ совпадение без приближения
   ОСОБЕННОСТИ: Мгновенная работа, возвращает только 100% или 0%

═══════════════════════════════════════════════════════════════════
📚 БИБЛИОТЕКА RAPIDFUZZ (10 методов)
═══════════════════════════════════════════════════════════════════

1️⃣ WRatio
   ОПИСАНИЕ: Взвешенный алгоритм, автоматически выбирает лучшую стратегию
   КАК РАБОТАЕТ: Комбинирует несколько методов и выбирает лучший результат
   ПРИМЕР:
      "Microsoft Office 365" vs "MS Office 365" → 95%
      "Adobe Reader DC" vs "Acrobat Reader" → 85%
   КОГДА ИСПОЛЬЗОВАТЬ: Универсальный метод, подходит для большинства случаев

2️⃣ Token Set
   ОПИСАНИЕ: Сравнивает уникальные слова, игнорируя порядок и дубликаты
   КАК РАБОТАЕТ: Разбивает на слова, убирает повторы, сравнивает множества
   ПРИМЕР:
      "SQL Server Management Studio" vs "Management Studio SQL Server" → 100%
      "Microsoft SQL Server" vs "SQL Server Microsoft" → 100%
   КОГДА ИСПОЛЬЗОВАТЬ: Когда порядок слов не важен

3️⃣ Token Sort
   ОПИСАНИЕ: Сортирует слова по алфавиту перед сравнением
   КАК РАБОТАЕТ: Разбивает на слова, сортирует, затем сравнивает
   ПРИМЕР:
      "Visual Studio Code" vs "Code Studio Visual" → 100%
      "Google Chrome Browser" vs "Browser Chrome Google" → 100%
   КОГДА ИСПОЛЬЗОВАТЬ: Когда названия содержат одни слова в разном порядке

4️⃣ Partial Ratio
   ОПИСАНИЕ: Ищет лучшее совпадение подстрок
   КАК РАБОТАЕТ: Проверяет, содержится ли короткая строка в длинной
   ПРИМЕР:
      "Office" vs "Microsoft Office 365 ProPlus" → 90%
      "Chrome" vs "Google Chrome Browser" → 85%
   КОГДА ИСПОЛЬЗОВАТЬ: Когда одно название короткое, другое полное

5️⃣ Ratio
   ОПИСАНИЕ: Простое посимвольное сравнение Левенштейна
   КАК РАБОТАЕТ: Считает минимальное число правок для совпадения
   ПРИМЕР:
      "Firefox" vs "Firefoх" (русская 'х') → 95%
      "Chrome" vs "Chromium" → 85%
   КОГДА ИСПОЛЬЗОВАТЬ: Для точного посимвольного сравнения

6️⃣ QRatio
   ОПИСАНИЕ: Быстрая версия Ratio с оптимизациями
   КАК РАБОТАЕТ: Упрощенный алгоритм для ускорения
   ПРИМЕР: Аналогично Ratio, но работает быстрее
   КОГДА ИСПОЛЬЗОВАТЬ: Когда нужна скорость, а не максимальная точность

7️⃣ Token Ratio
   ОПИСАНИЕ: Комбинация Ratio и Token Sort
   КАК РАБОТАЕТ: Сортирует токены, затем применяет Ratio
   ПРИМЕР:
      "Adobe Acrobat Reader" vs "Reader Acrobat Adobe" → 100%
   КОГДА ИСПОЛЬЗОВАТЬ: Средний вариант между Token Sort и Ratio

8️⃣ Partial Token Ratio
   ОПИСАНИЕ: Комбинация Partial Ratio и Token Ratio
   КАК РАБОТАЕТ: Частичное совпадение с сортировкой токенов
   ПРИМЕР:
      "MS Office" vs "Microsoft Office Professional Plus 2021" → 85%
   КОГДА ИСПОЛЬЗОВАТЬ: Короткое название vs полное с сортировкой

9️⃣ Partial Token Set
   ОПИСАНИЕ: Комбинация Partial Ratio и Token Set
   КАК РАБОТАЕТ: Частичное совпадение уникальных токенов
   ПРИМЕР:
      "SQL Server" vs "Microsoft SQL Server Enterprise Edition" → 90%
   КОГДА ИСПОЛЬЗОВАТЬ: Подмножество слов в большом названии

🔟 Partial Token Sort
   ОПИСАНИЕ: Комбинация Partial Ratio и Token Sort
   КАК РАБОТАЕТ: Частичное совпадение с сортированными токенами
   ПРИМЕР:
      "Chrome Browser" vs "Google Chrome Web Browser Latest" → 85%
   КОГДА ИСПОЛЬЗОВАТЬ: Частичное совпадение с игнорированием порядка

═══════════════════════════════════════════════════════════════════
📊 БИБЛИОТЕКА TEXTDISTANCE (5 методов)
═══════════════════════════════════════════════════════════════════

1️⃣1️⃣ Jaro-Winkler
   ОПИСАНИЕ: Фонетическое сравнение с акцентом на начало строки
   КАК РАБОТАЕТ: Больший вес символам в начале названия
   ПРИМЕР:
      "Microsoft" vs "Mikrosoft" → 95%
      "PostgreSQL" vs "Postgres" → 90%
   КОГДА ИСПОЛЬЗОВАТЬ: Когда начало названия важнее конца

1️⃣2️⃣ Jaro
   ОПИСАНИЕ: Базовая версия Jaro без акцента на начало
   КАК РАБОТАЕТ: Равномерное сравнение по всей строке
   ПРИМЕР:
      "Oracle" vs "Orakle" → 92%
   КОГДА ИСПОЛЬЗОВАТЬ: Для фонетического сравнения без приоритета

1️⃣3️⃣ Jaccard
   ОПИСАНИЕ: Сравнение множеств символов/биграмм
   КАК РАБОТАЕТ: Считает пересечение и объединение множеств
   ПРИМЕР:
      "MySQL" vs "MariaDB" → 40% (мало общих символов)
      "Python" vs "Pythan" → 85%
   КОГДА ИСПОЛЬЗОВАТЬ: Для оценки общих элементов

1️⃣4️⃣ Sorensen-Dice
   ОПИСАНИЕ: Похож на Jaccard, но с другой формулой
   КАК РАБОТАЕТ: Удвоенное пересечение / сумма размеров
   ПРИМЕР:
      "Redis" vs "Reddis" → 80%
   КОГДА ИСПОЛЬЗОВАТЬ: Альтернатива Jaccard, чуть мягче

1️⃣5️⃣ Cosine
   ОПИСАНИЕ: Косинусное расстояние векторов символов
   КАК РАБОТАЕТ: Преобразует строки в векторы, считает угол
   ПРИМЕР:
      "MongoDB" vs "Mongo DB" → 95%
   КОГДА ИСПОЛЬЗОВАТЬ: Для математически точного сравнения

═══════════════════════════════════════════════════════════════════
🔊 БИБЛИОТЕКА JELLYFISH (2 метода)
═══════════════════════════════════════════════════════════════════

1️⃣6️⃣ Jaro-Winkler (Jellyfish)
   ОПИСАНИЕ: Аналог TextDistance Jaro-Winkler
   КАК РАБОТАЕТ: Та же логика, другая реализация
   ПРИМЕР: Аналогичные результаты TextDistance версии
   КОГДА ИСПОЛЬЗОВАТЬ: Альтернативная реализация

1️⃣7️⃣ Jaro (Jellyfish)
   ОПИСАНИЕ: Аналог TextDistance Jaro
   КАК РАБОТАЕТ: Та же логика, другая реализация
   ПРИМЕР: Аналогичные результаты TextDistance версии
   КОГДА ИСПОЛЬЗОВАТЬ: Альтернативная реализация

═══════════════════════════════════════════════════════════════════
💡 СОВЕТЫ ПО ВЫБОРУ МЕТОДА
═══════════════════════════════════════════════════════════════════

📌 Точное совпадение → Точное совпадение (ВПР)
🎯 Общий случай → WRatio (автоматический выбор стратегии)
📝 Разный порядок слов → Token Set / Token Sort
✂️ Короткое vs полное → Partial Ratio / Partial Token Set
🔤 Опечатки → Jaro-Winkler / Ratio
⚡ Нужна скорость → QRatio
🎲 Не уверены → Запустите режим "Сравнение методов"!
"""

    @staticmethod
    def get_normalization_description() -> str:
        """Описание расширенной нормализации"""
        return """🔬 РАСШИРЕННАЯ НОРМАЛИЗАЦИЯ (v3.0.0 - ИСПРАВЛЕНО!)

✅ ВАЖНО: В версии 3.0.0 исправлена критическая ошибка - теперь изменение
чекбоксов РЕАЛЬНО влияет на результаты сопоставления!

Включите чекбоксы для более точного сопоставления:

☑ Удалять юридические формы: ООО, Ltd, Inc, GmbH, LLC, Corp...
   Пример: "ООО Рога и Копыта" → "рога и копыта"

☑ Удалять версии: 2021, v4.x, R2, SP1, x64, 2019...
   Пример: "Microsoft Office 2021 x64" → "microsoft office"

☑ Удалять стоп-слова: и, в, the, a, and, or, of...
   Пример: "Google Chrome and Firefox" → "google chrome firefox"

☑ Транслитерация: преобразование кириллицы в латиницу
   Пример: "Яндекс Браузер" → "yandeks brauzer"

☑ Удалять пунктуацию: по умолчанию включено
   Пример: "Adobe Acrobat, Reader (DC)" → "adobe acrobat reader dc"

🐛 DEBUG COLUMNS: Проверьте желтые столбцы в Excel для просмотра нормализованных значений!

📝 РЕЖИМ МНОЖЕСТВЕННЫХ СТОЛБЦОВ (КОНКАТЕНАЦИЯ)

Как включить:
  ☑ Режим сравнения по 2 столбцам одновременно (v3.0.0 - auto-mode)
  • Чекбокс включается АВТОМАТИЧЕСКИ при выборе 2 столбцов в обоих источниках
  • Не нужно вручную управлять!

Как работает:
  Объединяет значения из выбранных столбцов в одну строку через ПРОБЕЛ
  Пример: Столбец1="Microsoft" + Столбец2="Office" → "Microsoft Office"
  Затем применяется нормализация → "microsoft office"

Рекомендации:
  • Включите ВСЕ опции нормализации для максимальной точности
  • Подходит для: vendor+product, категория+подкатегория, семейство+редакция
  • Проверяйте debug columns для контроля нормализации

💡 ВАЖНО: Нормализация применяется к обоим источникам данных!"""
