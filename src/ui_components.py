"""
–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è Expert Excel Matcher

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö
UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É—Å—Ç—Ä–∞–Ω—è—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
"""

import tkinter as tk
from tkinter import ttk
from typing import Callable, List, Tuple, Optional


class ScrollableFrame(tk.Frame):
    """
    –§—Ä–µ–π–º —Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        container = ScrollableFrame(parent)
        container.pack(fill="both", expand=True)

        # –î–æ–±–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–∂–µ—Ç—ã –≤ container.scrollable_frame
        tk.Label(container.scrollable_frame, text="Hello").pack()
    """

    def __init__(self, parent, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–≥–æ —Ñ—Ä–µ–π–º–∞

        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Frame
        """
        super().__init__(parent, **kwargs)

        # –°–æ–∑–¥–∞–µ–º Canvas –∏ Scrollbar
        self.canvas = tk.Canvas(self)
        self.scrollbar = tk.Scrollbar(self, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas, padx=20, pady=20)

        # –°–≤—è–∑—ã–≤–∞–µ–º —Ñ—Ä–µ–π–º —Å Canvas
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )

        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)

        # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
        self.canvas.bind_all("<MouseWheel>", self._on_mousewheel)

    def _on_mousewheel(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏"""
        self.canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

    def destroy(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞"""
        self.canvas.unbind_all("<MouseWheel>")
        super().destroy()


class TreeviewWithScrollbar(tk.Frame):
    """
    Treeview —Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        tree_widget = TreeviewWithScrollbar(
            parent,
            columns=("col1", "col2"),
            headers=[("col1", "Column 1", 100), ("col2", "Column 2", 200)],
            height=15
        )
        tree_widget.pack(fill="both", expand=True)

        # –î–æ—Å—Ç—É–ø –∫ Treeview —á–µ—Ä–µ–∑ tree_widget.tree
        tree_widget.tree.insert("", "end", values=("value1", "value2"))
    """

    def __init__(self, parent, columns: Tuple[str, ...],
                 headers: List[Tuple[str, str, int]],
                 height: int = 15,
                 horizontal_scroll: bool = False,
                 **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Treeview —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π

        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            columns: –ö–æ—Ä—Ç–µ–∂ —Å –∏–º–µ–Ω–∞–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            headers: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (column_id, header_text, width)
            height: –í—ã—Å–æ—Ç–∞ Treeview (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫)
            horizontal_scroll: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Treeview
        """
        super().__init__(parent)

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        self.scroll_y = ttk.Scrollbar(self)
        self.scroll_y.pack(side=tk.RIGHT, fill=tk.Y)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.scroll_x = None
        if horizontal_scroll:
            self.scroll_x = ttk.Scrollbar(self, orient=tk.HORIZONTAL)
            self.scroll_x.pack(side=tk.BOTTOM, fill=tk.X)

        # –°–æ–∑–¥–∞–µ–º Treeview
        tree_kwargs = {
            'columns': columns,
            'show': 'headings',
            'yscrollcommand': self.scroll_y.set,
            'height': height
        }

        if horizontal_scroll and self.scroll_x:
            tree_kwargs['xscrollcommand'] = self.scroll_x.set

        tree_kwargs.update(kwargs)

        self.tree = ttk.Treeview(self, **tree_kwargs)

        # –°–≤—è–∑—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        self.scroll_y.config(command=self.tree.yview)
        if self.scroll_x:
            self.scroll_x.config(command=self.tree.xview)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        for col_id, header_text, width in headers:
            self.tree.heading(col_id, text=header_text)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: –ø–æ —Ü–µ–Ω—Ç—Ä—É –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö, —Å–ª–µ–≤–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            anchor = tk.W if any(word in header_text.lower() for word in ['–º–µ—Ç–æ–¥', '–∏—Å—Ç–æ—á–Ω–∏–∫', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞']) else tk.CENTER
            self.tree.column(col_id, width=width, anchor=anchor)

        self.tree.pack(fill=tk.BOTH, expand=True)


class MethodSelectorListbox(tk.Frame):
    """
    Listbox –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–æ–≤ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö/—Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        selector = MethodSelectorListbox(
            parent,
            methods=["Method 1", "Method 2"],
            on_select_all=callback,
            on_deselect_all=callback
        )
        selector.pack(fill="both", expand=True)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        selected = selector.get_selected()
    """

    def __init__(self, parent, methods: List[str],
                 on_select_all: Optional[Callable] = None,
                 on_deselect_all: Optional[Callable] = None,
                 height: int = 10,
                 **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–æ–≤

        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            methods: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥–æ–≤
            on_select_all: Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
            on_deselect_all: Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–Ω—è—Ç—å –≤—ã–±–æ—Ä"
            height: –í—ã—Å–æ—Ç–∞ Listbox
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Listbox
        """
        super().__init__(parent)

        # –§—Ä–µ–π–º –¥–ª—è Listbox —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        listbox_frame = tk.Frame(self)
        listbox_frame.pack(fill=tk.BOTH, expand=True)

        scrollbar = tk.Scrollbar(listbox_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        listbox_kwargs = {
            'selectmode': tk.MULTIPLE,
            'yscrollcommand': scrollbar.set,
            'height': height,
            'font': ("Consolas", 9),
            'activestyle': 'none'
        }
        listbox_kwargs.update(kwargs)

        self.listbox = tk.Listbox(listbox_frame, **listbox_kwargs)
        self.listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=self.listbox.yview)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–µ—Ç–æ–¥–∞–º–∏
        for method in methods:
            self.listbox.insert(tk.END, method)

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞W callbacks)
        if on_select_all or on_deselect_all:
            btn_frame = tk.Frame(self)
            btn_frame.pack(fill=tk.X, pady=(5, 0))

            if on_select_all:
                tk.Button(btn_frame, text="‚úì –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", command=on_select_all,
                         bg="#10B981", fg="white", font=("Arial", 8)).pack(side=tk.LEFT, padx=2)

            if on_deselect_all:
                tk.Button(btn_frame, text="‚úó –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", command=on_deselect_all,
                         bg="#EF4444", fg="white", font=("Arial", 8)).pack(side=tk.LEFT, padx=2)

    def get_selected(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        return list(self.listbox.curselection())

    def select_all(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
        self.listbox.select_set(0, tk.END)

    def deselect_all(self):
        """–°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        self.listbox.selection_clear(0, tk.END)


class FileSelectorWidget(tk.Frame):
    """
    –í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: –º–µ—Ç–∫–∞ + –∫–Ω–æ–ø–∫–∞

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        file_selector = FileSelectorWidget(
            parent,
            label_text="1Ô∏è‚É£ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö 1:",
            button_text="üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª",
            on_select=callback
        )
        file_selector.pack(fill="x", pady=5)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        file_selector.update_file_label("C:/path/to/file.xlsx")
    """

    def __init__(self, parent, label_text: str, button_text: str,
                 on_select: Callable,
                 button_color: str = "#10B981",
                 **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞

        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            label_text: –¢–µ–∫—Å—Ç –º–µ—Ç–∫–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è)
            button_text: –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
            on_select: Callback –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
            button_color: –¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ (hex)
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Frame
        """
        super().__init__(parent, **kwargs)

        # –ú–µ—Ç–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ–ª—è
        tk.Label(self, text=label_text, font=("Arial", 10, "bold")).pack(anchor=tk.W)

        # –ú–µ—Ç–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
        self.file_label = tk.Label(self, text="üìÇ –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", fg="gray", font=("Arial", 9))
        self.file_label.pack(anchor=tk.W, padx=20)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        tk.Button(
            self,
            text=button_text,
            command=on_select,
            bg=button_color,
            fg="white",
            font=("Arial", 9, "bold"),
            padx=15,
            pady=5
        ).pack(anchor=tk.W, padx=20, pady=3)

    def update_file_label(self, file_path: str):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–∫—É —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É

        Args:
            file_path: –ü—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        if file_path:
            self.file_label.config(text=f"‚úÖ {file_path}", fg="green")
        else:
            self.file_label.config(text="üìÇ –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", fg="gray")


# ========== –§–£–ù–ö–¶–ò–ò-–•–ï–õ–ü–ï–†–´ –î–õ–Ø –°–¢–ò–õ–ò–ó–ê–¶–ò–ò ==========

def create_label_frame(parent, title: str, **kwargs) -> tk.LabelFrame:
    """
    –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π LabelFrame

    Args:
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ—Ä–µ–π–º–∞
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    Returns:
        LabelFrame —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
    """
    defaults = {
        'font': ("Arial", 11, "bold"),
        'padx': 10,
        'pady': 10
    }
    defaults.update(kwargs)

    return tk.LabelFrame(parent, text=title, **defaults)


def create_info_label_frame(parent, title: str, **kwargs) -> tk.LabelFrame:
    """
    –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π LabelFrame (—Å –≥–æ–ª—É–±—ã–º —Ñ–æ–Ω–æ–º)

    Args:
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ—Ä–µ–π–º–∞
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    Returns:
        LabelFrame —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
    """
    defaults = {
        'font': ("Arial", 11, "bold"),
        'padx': 15,
        'pady': 15,
        'bg': "#F0F9FF"
    }
    defaults.update(kwargs)

    return tk.LabelFrame(parent, text=title, **defaults)


def create_styled_button(parent, text: str, command: Callable,
                        color: str = "#3B82F6", **kwargs) -> tk.Button:
    """
    –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É

    Args:
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        command: Callback –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        color: –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (hex)
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    Returns:
        –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    """
    defaults = {
        'bg': color,
        'fg': 'white',
        'font': ("Arial", 10, "bold"),
        'padx': 20,
        'pady': 5
    }
    defaults.update(kwargs)

    return tk.Button(parent, text=text, command=command, **defaults)


def create_title_header(parent, title: str, subtitle: str = "",
                       bg_color: str = "#7C3AED") -> tk.Frame:
    """
    –°–æ–∑–¥–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (title + subtitle)

    Args:
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        title: –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle: –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        bg_color: –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (hex)

    Returns:
        Frame —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    """
    title_frame = tk.Frame(parent, bg=bg_color, pady=15)

    tk.Label(
        title_frame,
        text=title,
        font=("Arial", 18, "bold"),
        fg="white",
        bg=bg_color
    ).pack()

    if subtitle:
        tk.Label(
            title_frame,
            text=subtitle,
            font=("Arial", 10),
            fg="white",
            bg=bg_color
        ).pack()

    return title_frame
