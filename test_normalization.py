# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import sys
import io
import re
from transliterate import translit

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTF-8 –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
class NormalizationConstants:
    RU_STOP = {"–∏", "–≤", "–≤–æ", "–Ω–µ", "–Ω–∞", "–Ω–æ", "–ø—Ä–∏", "–¥–ª—è", "–∫", "–∏–∑", "–æ—Ç", "—Å", "—Å–æ", "–æ", "–∞", "—É", "–ø–æ", "–Ω–∞–¥", "–ø–æ–¥", "–¥–æ", "–±–µ–∑", "–∏–ª–∏"}
    EN_STOP = {"the", "a", "an", "and", "or", "of", "for", "in", "on", "at", "to", "from", "with", "by", "without", "into", "out", "over", "under", "above", "below"}
    STOP_WORDS = RU_STOP | EN_STOP

    LEGAL_PREFIXES = [
        r'\b–û–û–û\b', r'\b–ê–û\b', r'\b–ó–ê–û\b', r'\b–ò–ü\b', r'\b–ü–ê–û\b', r'\b–ì–ö\b',
        r'\b–ù–ö–û\b', r'\b–ù–ü–û\b', r'\b–ù–ü–ü\b', r'\b–ù–ü–§\b', r'\b–û–ê–û\b',
        r'\bLtd\.?\b', r'\bLimited\b', r'\bInc\.?\b', r'\bLLC\b', r'\bGmbH\b',
        r'\bCorp\.?\b', r'\bCo\.?\b', r'\bSARL\b', r'\bS\.?A\.?\b',
        r'\bPLC\b', r'\bGroup\b', r'\bCompany\b', r'\b–ö–æ–º–ø–∞–Ω–∏—è\b',
    ]

    VERSION_PATTERNS = [
        r'\b(19|20)\d{2}\b',
        r'\b[vV]\.?\d+\.[xX]\b',
        r'\b\d+\.[xX]\b',
        r'\b[vV]\.?\d+(\.\d+)*[a-zA-Z]*\b',
        r'\b\d+\.\d+(\.\d+)*[a-zA-Z]*\b',
        r'\bR\d+\b',
        r'\bSP\d+\b',
        r'\b(x64|x86|64[-\s]?bit|32[-\s]?bit)\b',
        r'\b(Win|Windows|Linux|Mac|MacOS)\s*\d*\b',
    ]


def normalize_advanced(s, remove_legal=True, remove_versions=True,
                       remove_stopwords=True, transliterate_text=True,
                       remove_punctuation=True):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∫ –≤ Notebook"""
    if not s:
        return ""

    s = str(s).strip()

    # 1. –£–¥–∞–ª–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º
    if remove_legal:
        for pattern in NormalizationConstants.LEGAL_PREFIXES:
            s = re.sub(pattern, ' ', s, flags=re.IGNORECASE)

    # 2. –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
    if remove_versions:
        for pattern in NormalizationConstants.VERSION_PATTERNS:
            s = re.sub(pattern, ' ', s, flags=re.IGNORECASE)

    # 3. Lowercase
    s = s.lower()

    # 4. –£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
    if remove_punctuation:
        s = re.sub(r'[^a-z–∞-—è—ë0-9\s]', ' ', s)

    # 5. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤
    if remove_stopwords:
        words = s.split()
        words = [w for w in words if w and w not in NormalizationConstants.STOP_WORDS]
        s = ' '.join(words)

    # 6. –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
    if transliterate_text:
        if re.search(r'[–∞-—è—ë]', s):
            try:
                s = translit(s, 'ru', reversed=True)
            except:
                pass

    # 7. –°—Ö–ª–æ–ø—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
    s = re.sub(r'\s+', ' ', s).strip()

    return s


def normalize_basic(s):
    """–ë–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)"""
    if not s:
        return ""
    s = str(s).lower().strip()
    s = re.sub(r'\s+', ' ', s)
    return s


# –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã
test_cases = [
    "–û–û–û 1–° –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ 8.3 x64",
    "Microsoft Office 2021 Professional",
    "Adobe Photoshop CC 2019",
    "Ltd Norton Antivirus v12.5",
    "AutoCAD 2023 SP1 Windows 10",
    "Oracle Database 19c Enterprise Edition",
    "–û–û–û ¬´–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –ö–∞—Å–ø–µ—Ä—Å–∫–æ–≥–æ¬ª Kaspersky Endpoint Security 11.3",
    "Google Chrome 120.0.6099.129 64-bit",
    "Visual Studio Code v1.85.2",
    "–Ø–Ω–¥–µ–∫—Å.–ë—Ä–∞—É–∑–µ—Ä 23.11.0.2401",
]

print("=" * 100)
print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ô –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò")
print("=" * 100)

for test in test_cases:
    basic = normalize_basic(test)
    advanced = normalize_advanced(test)

    print(f"\n{'‚îÄ' * 100}")
    print(f"üìù –û–†–ò–ì–ò–ù–ê–õ: {test}")
    print(f"{'‚îÄ' * 100}")
    print(f"‚ùå –ë–ê–ó–û–í–ê–Ø:  {basic}")
    print(f"‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø: {advanced}")
    print(f"   –î–ª–∏–Ω–∞: {len(test)} ‚Üí {len(basic)} (–±–∞–∑–æ–≤–∞—è) ‚Üí {len(advanced)} (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)")

print(f"\n{'=' * 100}")
print("–°–†–ê–í–ù–ï–ù–ò–ï –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò")
print("=" * 100)

# –ü—Ä–∏–º–µ—Ä —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
source = "–û–û–û 1–° –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ 8.3 x64"
target = "1C Enterprise"

print(f"\nüéØ –ó–ê–î–ê–ß–ê: –°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å '{source}' –∏ '{target}'")
print("\n" + "‚îÄ" * 100)

basic_s = normalize_basic(source)
basic_t = normalize_basic(target)
print(f"‚ùå –ë–ê–ó–û–í–ê–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø:")
print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: '{basic_s}'")
print(f"   –¶–µ–ª—å:     '{basic_t}'")
print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤: {set(basic_s.split()) & set(basic_t.split())}")
print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úì –°–û–í–ü–ê–î–Å–¢' if '1c' in basic_s and '1c' in basic_t else '‚úó –ù–ï –°–û–í–ü–ê–î–Å–¢'}")

print("\n" + "‚îÄ" * 100)

advanced_s = normalize_advanced(source)
advanced_t = normalize_advanced(target)
print(f"‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø:")
print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: '{advanced_s}'")
print(f"   –¶–µ–ª—å:     '{advanced_t}'")
print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤: {set(advanced_s.split()) & set(advanced_t.split())}")
print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úì –°–û–í–ü–ê–î–Å–¢' if 'enterprise' in advanced_s and 'enterprise' in advanced_t else '‚úó –ù–ï –°–û–í–ü–ê–î–Å–¢'}")

print("\n" + "=" * 100)
print("‚úì –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
print("=" * 100)
