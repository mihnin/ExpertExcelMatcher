# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç: —ç–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–∞ BGE-M3 –∫–∞–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
"""

import sys
import io

if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

import numpy as np
import pandas as pd
from FlagEmbedding import BGEM3FlagModel

print("=" * 80)
print("–¢–ï–°–¢: –≠–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–∞ BGE-M3 –º–µ—Ç–æ–¥–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
print("=" * 80)

# –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å-–æ–±—ë—Ä—Ç–∫—É, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π ExpertMatcher
class TestMatcher:
    def __init__(self):
        self.bge_model = None

    def bge_cosine_similarity(self, s1: str, s2: str) -> float:
        """–ö–æ–ø–∏—è –º–µ—Ç–æ–¥–∞ –∏–∑ expert_matcher.py"""
        if not s1 or not s2 or pd.isna(s1) or pd.isna(s2):
            print(f"  ‚ùå –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: s1='{s1}', s2='{s2}'")
            return 0.0

        # –°—Ç—Ä–æ–∫–∏ —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ normalize_string(), –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º
        s1 = str(s1).strip()
        s2 = str(s2).strip()

        if not s1 or not s2:
            print(f"  ‚ùå –ü—É—Å—Ç–∞—è –ø–æ—Å–ª–µ strip: s1='{s1}', s2='{s2}'")
            return 0.0

        # –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ BGE-M3
        if self.bge_model is None:
            try:
                print("üß† –ó–∞–≥—Ä—É–∑–∫–∞ BGE-M3 –º–æ–¥–µ–ª–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã)...")
                self.bge_model = BGEM3FlagModel(
                    'BAAI/bge-m3',
                    device='cpu',
                    use_fp16=False,
                    normalize_embeddings=True
                )
                print("‚úÖ BGE-M3 –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BGE-M3: {e}")
                import traceback
                traceback.print_exc()
                self.bge_model = False
                return 0.0

        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å —Ä–∞–Ω–µ–µ
        if self.bge_model is False:
            print("  ‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—Ñ–ª–∞–≥ False)")
            return 0.0

        try:
            print(f"  üîÑ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: '{s1}' vs '{s2}'")
            # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –≤–µ–∫—Ç–æ—Ä—ã (1024-–º–µ—Ä–Ω—ã–µ)
            vec1 = self.bge_model.encode(str(s1).lower())['dense_vecs']
            vec2 = self.bge_model.encode(str(s2).lower())['dense_vecs']

            # –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —á–µ—Ä–µ–∑ —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            similarity = float(np.dot(vec1, vec2))

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0, 1] –≤ [0, 100]
            result = similarity * 100.0
            print(f"  ‚úÖ –°—Ö–æ–¥—Å—Ç–≤–æ: {result:.2f}%")
            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è BGE —Å—Ö–æ–¥—Å—Ç–≤–∞ –¥–ª—è '{s1}' vs '{s2}': {e}")
            import traceback
            traceback.print_exc()
            return 0.0

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
matcher = TestMatcher()

print("\n" + "=" * 80)
print("–¢–ï–°–¢ 1: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–∫–∞–∫ –∏—Ö –ø–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–æ–¥)")
print("=" * 80)

test_cases = [
    ("microsoft office", "ms office"),
    ("1s predprijatie", "1c enterprise"),
    ("adobe photoshop", "photoshop"),
]

for s1, s2 in test_cases:
    print(f"\n–í—ã–∑–æ–≤: bge_cosine_similarity('{s1}', '{s2}')")
    score = matcher.bge_cosine_similarity(s1, s2)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {score:.2f}%")
    if score == 0:
        print("  ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ú–µ—Ç–æ–¥ –≤–µ—Ä–Ω—É–ª 0!")

print("\n" + "=" * 80)
print("–¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏")
print("=" * 80)

empty_cases = [
    ("", "test"),
    ("test", ""),
    ("", ""),
]

for s1, s2 in empty_cases:
    print(f"\n–í—ã–∑–æ–≤: bge_cosine_similarity('{s1}', '{s2}')")
    score = matcher.bge_cosine_similarity(s1, s2)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {score:.2f}%")

print("\n" + "=" * 80)
print("–ó–ê–í–ï–†–®–ï–ù–û")
print("=" * 80)
